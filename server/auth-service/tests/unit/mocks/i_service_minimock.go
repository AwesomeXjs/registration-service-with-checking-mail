// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/AwesomeXjs/registration-service-with-checking-mail/server/auth-service/internal/service.IService -o i_service_minimock.go -n IServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/AwesomeXjs/registration-service-with-checking-mail/server/auth-service/internal/model"
	"github.com/gojuno/minimock/v3"
)

// IServiceMock implements mm_service.IService
type IServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetAccessToken          func(ctx context.Context, refreshToken string) (np1 *model.NewPairTokens, err error)
	funcGetAccessTokenOrigin    string
	inspectFuncGetAccessToken   func(ctx context.Context, refreshToken string)
	afterGetAccessTokenCounter  uint64
	beforeGetAccessTokenCounter uint64
	GetAccessTokenMock          mIServiceMockGetAccessToken

	funcLogin          func(ctx context.Context, loginRequest *model.LoginInfo) (ap1 *model.AuthResponse, err error)
	funcLoginOrigin    string
	inspectFuncLogin   func(ctx context.Context, loginRequest *model.LoginInfo)
	afterLoginCounter  uint64
	beforeLoginCounter uint64
	LoginMock          mIServiceMockLogin

	funcRegistration          func(ctx context.Context, registrationRequest *model.UserInfo) (ap1 *model.AuthResponse, err error)
	funcRegistrationOrigin    string
	inspectFuncRegistration   func(ctx context.Context, registrationRequest *model.UserInfo)
	afterRegistrationCounter  uint64
	beforeRegistrationCounter uint64
	RegistrationMock          mIServiceMockRegistration

	funcUpdatePassword          func(ctx context.Context, updatePassInfo *model.UpdatePassInfo) (err error)
	funcUpdatePasswordOrigin    string
	inspectFuncUpdatePassword   func(ctx context.Context, updatePassInfo *model.UpdatePassInfo)
	afterUpdatePasswordCounter  uint64
	beforeUpdatePasswordCounter uint64
	UpdatePasswordMock          mIServiceMockUpdatePassword

	funcValidateToken          func(ctx context.Context, accessToken string) (b1 bool, err error)
	funcValidateTokenOrigin    string
	inspectFuncValidateToken   func(ctx context.Context, accessToken string)
	afterValidateTokenCounter  uint64
	beforeValidateTokenCounter uint64
	ValidateTokenMock          mIServiceMockValidateToken
}

// NewIServiceMock returns a mock for mm_service.IService
func NewIServiceMock(t minimock.Tester) *IServiceMock {
	m := &IServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAccessTokenMock = mIServiceMockGetAccessToken{mock: m}
	m.GetAccessTokenMock.callArgs = []*IServiceMockGetAccessTokenParams{}

	m.LoginMock = mIServiceMockLogin{mock: m}
	m.LoginMock.callArgs = []*IServiceMockLoginParams{}

	m.RegistrationMock = mIServiceMockRegistration{mock: m}
	m.RegistrationMock.callArgs = []*IServiceMockRegistrationParams{}

	m.UpdatePasswordMock = mIServiceMockUpdatePassword{mock: m}
	m.UpdatePasswordMock.callArgs = []*IServiceMockUpdatePasswordParams{}

	m.ValidateTokenMock = mIServiceMockValidateToken{mock: m}
	m.ValidateTokenMock.callArgs = []*IServiceMockValidateTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIServiceMockGetAccessToken struct {
	optional           bool
	mock               *IServiceMock
	defaultExpectation *IServiceMockGetAccessTokenExpectation
	expectations       []*IServiceMockGetAccessTokenExpectation

	callArgs []*IServiceMockGetAccessTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceMockGetAccessTokenExpectation specifies expectation struct of the IService.GetAccessToken
type IServiceMockGetAccessTokenExpectation struct {
	mock               *IServiceMock
	params             *IServiceMockGetAccessTokenParams
	paramPtrs          *IServiceMockGetAccessTokenParamPtrs
	expectationOrigins IServiceMockGetAccessTokenExpectationOrigins
	results            *IServiceMockGetAccessTokenResults
	returnOrigin       string
	Counter            uint64
}

// IServiceMockGetAccessTokenParams contains parameters of the IService.GetAccessToken
type IServiceMockGetAccessTokenParams struct {
	ctx          context.Context
	refreshToken string
}

// IServiceMockGetAccessTokenParamPtrs contains pointers to parameters of the IService.GetAccessToken
type IServiceMockGetAccessTokenParamPtrs struct {
	ctx          *context.Context
	refreshToken *string
}

// IServiceMockGetAccessTokenResults contains results of the IService.GetAccessToken
type IServiceMockGetAccessTokenResults struct {
	np1 *model.NewPairTokens
	err error
}

// IServiceMockGetAccessTokenOrigins contains origins of expectations of the IService.GetAccessToken
type IServiceMockGetAccessTokenExpectationOrigins struct {
	origin             string
	originCtx          string
	originRefreshToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAccessToken *mIServiceMockGetAccessToken) Optional() *mIServiceMockGetAccessToken {
	mmGetAccessToken.optional = true
	return mmGetAccessToken
}

// Expect sets up expected params for IService.GetAccessToken
func (mmGetAccessToken *mIServiceMockGetAccessToken) Expect(ctx context.Context, refreshToken string) *mIServiceMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by ExpectParams functions")
	}

	mmGetAccessToken.defaultExpectation.params = &IServiceMockGetAccessTokenParams{ctx, refreshToken}
	mmGetAccessToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAccessToken.expectations {
		if minimock.Equal(e.params, mmGetAccessToken.defaultExpectation.params) {
			mmGetAccessToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAccessToken.defaultExpectation.params)
		}
	}

	return mmGetAccessToken
}

// ExpectCtxParam1 sets up expected param ctx for IService.GetAccessToken
func (mmGetAccessToken *mIServiceMockGetAccessToken) ExpectCtxParam1(ctx context.Context) *mIServiceMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &IServiceMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAccessToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// ExpectRefreshTokenParam2 sets up expected param refreshToken for IService.GetAccessToken
func (mmGetAccessToken *mIServiceMockGetAccessToken) ExpectRefreshTokenParam2(refreshToken string) *mIServiceMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &IServiceMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.refreshToken = &refreshToken
	mmGetAccessToken.defaultExpectation.expectationOrigins.originRefreshToken = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// Inspect accepts an inspector function that has same arguments as the IService.GetAccessToken
func (mmGetAccessToken *mIServiceMockGetAccessToken) Inspect(f func(ctx context.Context, refreshToken string)) *mIServiceMockGetAccessToken {
	if mmGetAccessToken.mock.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("Inspect function is already set for IServiceMock.GetAccessToken")
	}

	mmGetAccessToken.mock.inspectFuncGetAccessToken = f

	return mmGetAccessToken
}

// Return sets up results that will be returned by IService.GetAccessToken
func (mmGetAccessToken *mIServiceMockGetAccessToken) Return(np1 *model.NewPairTokens, err error) *IServiceMock {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceMockGetAccessTokenExpectation{mock: mmGetAccessToken.mock}
	}
	mmGetAccessToken.defaultExpectation.results = &IServiceMockGetAccessTokenResults{np1, err}
	mmGetAccessToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// Set uses given function f to mock the IService.GetAccessToken method
func (mmGetAccessToken *mIServiceMockGetAccessToken) Set(f func(ctx context.Context, refreshToken string) (np1 *model.NewPairTokens, err error)) *IServiceMock {
	if mmGetAccessToken.defaultExpectation != nil {
		mmGetAccessToken.mock.t.Fatalf("Default expectation is already set for the IService.GetAccessToken method")
	}

	if len(mmGetAccessToken.expectations) > 0 {
		mmGetAccessToken.mock.t.Fatalf("Some expectations are already set for the IService.GetAccessToken method")
	}

	mmGetAccessToken.mock.funcGetAccessToken = f
	mmGetAccessToken.mock.funcGetAccessTokenOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// When sets expectation for the IService.GetAccessToken which will trigger the result defined by the following
// Then helper
func (mmGetAccessToken *mIServiceMockGetAccessToken) When(ctx context.Context, refreshToken string) *IServiceMockGetAccessTokenExpectation {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceMock.GetAccessToken mock is already set by Set")
	}

	expectation := &IServiceMockGetAccessTokenExpectation{
		mock:               mmGetAccessToken.mock,
		params:             &IServiceMockGetAccessTokenParams{ctx, refreshToken},
		expectationOrigins: IServiceMockGetAccessTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAccessToken.expectations = append(mmGetAccessToken.expectations, expectation)
	return expectation
}

// Then sets up IService.GetAccessToken return parameters for the expectation previously defined by the When method
func (e *IServiceMockGetAccessTokenExpectation) Then(np1 *model.NewPairTokens, err error) *IServiceMock {
	e.results = &IServiceMockGetAccessTokenResults{np1, err}
	return e.mock
}

// Times sets number of times IService.GetAccessToken should be invoked
func (mmGetAccessToken *mIServiceMockGetAccessToken) Times(n uint64) *mIServiceMockGetAccessToken {
	if n == 0 {
		mmGetAccessToken.mock.t.Fatalf("Times of IServiceMock.GetAccessToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAccessToken.expectedInvocations, n)
	mmGetAccessToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken
}

func (mmGetAccessToken *mIServiceMockGetAccessToken) invocationsDone() bool {
	if len(mmGetAccessToken.expectations) == 0 && mmGetAccessToken.defaultExpectation == nil && mmGetAccessToken.mock.funcGetAccessToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.mock.afterGetAccessTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAccessToken implements mm_service.IService
func (mmGetAccessToken *IServiceMock) GetAccessToken(ctx context.Context, refreshToken string) (np1 *model.NewPairTokens, err error) {
	mm_atomic.AddUint64(&mmGetAccessToken.beforeGetAccessTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessToken.afterGetAccessTokenCounter, 1)

	mmGetAccessToken.t.Helper()

	if mmGetAccessToken.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.inspectFuncGetAccessToken(ctx, refreshToken)
	}

	mm_params := IServiceMockGetAccessTokenParams{ctx, refreshToken}

	// Record call args
	mmGetAccessToken.GetAccessTokenMock.mutex.Lock()
	mmGetAccessToken.GetAccessTokenMock.callArgs = append(mmGetAccessToken.GetAccessTokenMock.callArgs, &mm_params)
	mmGetAccessToken.GetAccessTokenMock.mutex.Unlock()

	for _, e := range mmGetAccessToken.GetAccessTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.np1, e.results.err
		}
	}

	if mmGetAccessToken.GetAccessTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessToken.GetAccessTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.params
		mm_want_ptrs := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.paramPtrs

		mm_got := IServiceMockGetAccessTokenParams{ctx, refreshToken}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAccessToken.t.Errorf("IServiceMock.GetAccessToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.refreshToken != nil && !minimock.Equal(*mm_want_ptrs.refreshToken, mm_got.refreshToken) {
				mmGetAccessToken.t.Errorf("IServiceMock.GetAccessToken got unexpected parameter refreshToken, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originRefreshToken, *mm_want_ptrs.refreshToken, mm_got.refreshToken, minimock.Diff(*mm_want_ptrs.refreshToken, mm_got.refreshToken))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAccessToken.t.Errorf("IServiceMock.GetAccessToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAccessToken.t.Fatal("No results are set for the IServiceMock.GetAccessToken")
		}
		return (*mm_results).np1, (*mm_results).err
	}
	if mmGetAccessToken.funcGetAccessToken != nil {
		return mmGetAccessToken.funcGetAccessToken(ctx, refreshToken)
	}
	mmGetAccessToken.t.Fatalf("Unexpected call to IServiceMock.GetAccessToken. %v %v", ctx, refreshToken)
	return
}

// GetAccessTokenAfterCounter returns a count of finished IServiceMock.GetAccessToken invocations
func (mmGetAccessToken *IServiceMock) GetAccessTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.afterGetAccessTokenCounter)
}

// GetAccessTokenBeforeCounter returns a count of IServiceMock.GetAccessToken invocations
func (mmGetAccessToken *IServiceMock) GetAccessTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.beforeGetAccessTokenCounter)
}

// Calls returns a list of arguments used in each call to IServiceMock.GetAccessToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAccessToken *mIServiceMockGetAccessToken) Calls() []*IServiceMockGetAccessTokenParams {
	mmGetAccessToken.mutex.RLock()

	argCopy := make([]*IServiceMockGetAccessTokenParams, len(mmGetAccessToken.callArgs))
	copy(argCopy, mmGetAccessToken.callArgs)

	mmGetAccessToken.mutex.RUnlock()

	return argCopy
}

// MinimockGetAccessTokenDone returns true if the count of the GetAccessToken invocations corresponds
// the number of defined expectations
func (m *IServiceMock) MinimockGetAccessTokenDone() bool {
	if m.GetAccessTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAccessTokenMock.invocationsDone()
}

// MinimockGetAccessTokenInspect logs each unmet expectation
func (m *IServiceMock) MinimockGetAccessTokenInspect() {
	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceMock.GetAccessToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAccessTokenCounter := mm_atomic.LoadUint64(&m.afterGetAccessTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessTokenMock.defaultExpectation != nil && afterGetAccessTokenCounter < 1 {
		if m.GetAccessTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceMock.GetAccessToken at\n%s", m.GetAccessTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceMock.GetAccessToken at\n%s with params: %#v", m.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *m.GetAccessTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessToken != nil && afterGetAccessTokenCounter < 1 {
		m.t.Errorf("Expected call to IServiceMock.GetAccessToken at\n%s", m.funcGetAccessTokenOrigin)
	}

	if !m.GetAccessTokenMock.invocationsDone() && afterGetAccessTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceMock.GetAccessToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAccessTokenMock.expectedInvocations), m.GetAccessTokenMock.expectedInvocationsOrigin, afterGetAccessTokenCounter)
	}
}

type mIServiceMockLogin struct {
	optional           bool
	mock               *IServiceMock
	defaultExpectation *IServiceMockLoginExpectation
	expectations       []*IServiceMockLoginExpectation

	callArgs []*IServiceMockLoginParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceMockLoginExpectation specifies expectation struct of the IService.Login
type IServiceMockLoginExpectation struct {
	mock               *IServiceMock
	params             *IServiceMockLoginParams
	paramPtrs          *IServiceMockLoginParamPtrs
	expectationOrigins IServiceMockLoginExpectationOrigins
	results            *IServiceMockLoginResults
	returnOrigin       string
	Counter            uint64
}

// IServiceMockLoginParams contains parameters of the IService.Login
type IServiceMockLoginParams struct {
	ctx          context.Context
	loginRequest *model.LoginInfo
}

// IServiceMockLoginParamPtrs contains pointers to parameters of the IService.Login
type IServiceMockLoginParamPtrs struct {
	ctx          *context.Context
	loginRequest **model.LoginInfo
}

// IServiceMockLoginResults contains results of the IService.Login
type IServiceMockLoginResults struct {
	ap1 *model.AuthResponse
	err error
}

// IServiceMockLoginOrigins contains origins of expectations of the IService.Login
type IServiceMockLoginExpectationOrigins struct {
	origin             string
	originCtx          string
	originLoginRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogin *mIServiceMockLogin) Optional() *mIServiceMockLogin {
	mmLogin.optional = true
	return mmLogin
}

// Expect sets up expected params for IService.Login
func (mmLogin *mIServiceMockLogin) Expect(ctx context.Context, loginRequest *model.LoginInfo) *mIServiceMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.paramPtrs != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by ExpectParams functions")
	}

	mmLogin.defaultExpectation.params = &IServiceMockLoginParams{ctx, loginRequest}
	mmLogin.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogin.expectations {
		if minimock.Equal(e.params, mmLogin.defaultExpectation.params) {
			mmLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogin.defaultExpectation.params)
		}
	}

	return mmLogin
}

// ExpectCtxParam1 sets up expected param ctx for IService.Login
func (mmLogin *mIServiceMockLogin) ExpectCtxParam1(ctx context.Context) *mIServiceMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &IServiceMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.ctx = &ctx
	mmLogin.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectLoginRequestParam2 sets up expected param loginRequest for IService.Login
func (mmLogin *mIServiceMockLogin) ExpectLoginRequestParam2(loginRequest *model.LoginInfo) *mIServiceMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &IServiceMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.loginRequest = &loginRequest
	mmLogin.defaultExpectation.expectationOrigins.originLoginRequest = minimock.CallerInfo(1)

	return mmLogin
}

// Inspect accepts an inspector function that has same arguments as the IService.Login
func (mmLogin *mIServiceMockLogin) Inspect(f func(ctx context.Context, loginRequest *model.LoginInfo)) *mIServiceMockLogin {
	if mmLogin.mock.inspectFuncLogin != nil {
		mmLogin.mock.t.Fatalf("Inspect function is already set for IServiceMock.Login")
	}

	mmLogin.mock.inspectFuncLogin = f

	return mmLogin
}

// Return sets up results that will be returned by IService.Login
func (mmLogin *mIServiceMockLogin) Return(ap1 *model.AuthResponse, err error) *IServiceMock {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceMockLoginExpectation{mock: mmLogin.mock}
	}
	mmLogin.defaultExpectation.results = &IServiceMockLoginResults{ap1, err}
	mmLogin.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// Set uses given function f to mock the IService.Login method
func (mmLogin *mIServiceMockLogin) Set(f func(ctx context.Context, loginRequest *model.LoginInfo) (ap1 *model.AuthResponse, err error)) *IServiceMock {
	if mmLogin.defaultExpectation != nil {
		mmLogin.mock.t.Fatalf("Default expectation is already set for the IService.Login method")
	}

	if len(mmLogin.expectations) > 0 {
		mmLogin.mock.t.Fatalf("Some expectations are already set for the IService.Login method")
	}

	mmLogin.mock.funcLogin = f
	mmLogin.mock.funcLoginOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// When sets expectation for the IService.Login which will trigger the result defined by the following
// Then helper
func (mmLogin *mIServiceMockLogin) When(ctx context.Context, loginRequest *model.LoginInfo) *IServiceMockLoginExpectation {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceMock.Login mock is already set by Set")
	}

	expectation := &IServiceMockLoginExpectation{
		mock:               mmLogin.mock,
		params:             &IServiceMockLoginParams{ctx, loginRequest},
		expectationOrigins: IServiceMockLoginExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogin.expectations = append(mmLogin.expectations, expectation)
	return expectation
}

// Then sets up IService.Login return parameters for the expectation previously defined by the When method
func (e *IServiceMockLoginExpectation) Then(ap1 *model.AuthResponse, err error) *IServiceMock {
	e.results = &IServiceMockLoginResults{ap1, err}
	return e.mock
}

// Times sets number of times IService.Login should be invoked
func (mmLogin *mIServiceMockLogin) Times(n uint64) *mIServiceMockLogin {
	if n == 0 {
		mmLogin.mock.t.Fatalf("Times of IServiceMock.Login mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogin.expectedInvocations, n)
	mmLogin.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogin
}

func (mmLogin *mIServiceMockLogin) invocationsDone() bool {
	if len(mmLogin.expectations) == 0 && mmLogin.defaultExpectation == nil && mmLogin.mock.funcLogin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogin.mock.afterLoginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Login implements mm_service.IService
func (mmLogin *IServiceMock) Login(ctx context.Context, loginRequest *model.LoginInfo) (ap1 *model.AuthResponse, err error) {
	mm_atomic.AddUint64(&mmLogin.beforeLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmLogin.afterLoginCounter, 1)

	mmLogin.t.Helper()

	if mmLogin.inspectFuncLogin != nil {
		mmLogin.inspectFuncLogin(ctx, loginRequest)
	}

	mm_params := IServiceMockLoginParams{ctx, loginRequest}

	// Record call args
	mmLogin.LoginMock.mutex.Lock()
	mmLogin.LoginMock.callArgs = append(mmLogin.LoginMock.callArgs, &mm_params)
	mmLogin.LoginMock.mutex.Unlock()

	for _, e := range mmLogin.LoginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmLogin.LoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogin.LoginMock.defaultExpectation.Counter, 1)
		mm_want := mmLogin.LoginMock.defaultExpectation.params
		mm_want_ptrs := mmLogin.LoginMock.defaultExpectation.paramPtrs

		mm_got := IServiceMockLoginParams{ctx, loginRequest}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLogin.t.Errorf("IServiceMock.Login got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.loginRequest != nil && !minimock.Equal(*mm_want_ptrs.loginRequest, mm_got.loginRequest) {
				mmLogin.t.Errorf("IServiceMock.Login got unexpected parameter loginRequest, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originLoginRequest, *mm_want_ptrs.loginRequest, mm_got.loginRequest, minimock.Diff(*mm_want_ptrs.loginRequest, mm_got.loginRequest))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogin.t.Errorf("IServiceMock.Login got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogin.LoginMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogin.LoginMock.defaultExpectation.results
		if mm_results == nil {
			mmLogin.t.Fatal("No results are set for the IServiceMock.Login")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmLogin.funcLogin != nil {
		return mmLogin.funcLogin(ctx, loginRequest)
	}
	mmLogin.t.Fatalf("Unexpected call to IServiceMock.Login. %v %v", ctx, loginRequest)
	return
}

// LoginAfterCounter returns a count of finished IServiceMock.Login invocations
func (mmLogin *IServiceMock) LoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.afterLoginCounter)
}

// LoginBeforeCounter returns a count of IServiceMock.Login invocations
func (mmLogin *IServiceMock) LoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.beforeLoginCounter)
}

// Calls returns a list of arguments used in each call to IServiceMock.Login.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogin *mIServiceMockLogin) Calls() []*IServiceMockLoginParams {
	mmLogin.mutex.RLock()

	argCopy := make([]*IServiceMockLoginParams, len(mmLogin.callArgs))
	copy(argCopy, mmLogin.callArgs)

	mmLogin.mutex.RUnlock()

	return argCopy
}

// MinimockLoginDone returns true if the count of the Login invocations corresponds
// the number of defined expectations
func (m *IServiceMock) MinimockLoginDone() bool {
	if m.LoginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LoginMock.invocationsDone()
}

// MinimockLoginInspect logs each unmet expectation
func (m *IServiceMock) MinimockLoginInspect() {
	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceMock.Login at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLoginCounter := mm_atomic.LoadUint64(&m.afterLoginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LoginMock.defaultExpectation != nil && afterLoginCounter < 1 {
		if m.LoginMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceMock.Login at\n%s", m.LoginMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceMock.Login at\n%s with params: %#v", m.LoginMock.defaultExpectation.expectationOrigins.origin, *m.LoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogin != nil && afterLoginCounter < 1 {
		m.t.Errorf("Expected call to IServiceMock.Login at\n%s", m.funcLoginOrigin)
	}

	if !m.LoginMock.invocationsDone() && afterLoginCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceMock.Login at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LoginMock.expectedInvocations), m.LoginMock.expectedInvocationsOrigin, afterLoginCounter)
	}
}

type mIServiceMockRegistration struct {
	optional           bool
	mock               *IServiceMock
	defaultExpectation *IServiceMockRegistrationExpectation
	expectations       []*IServiceMockRegistrationExpectation

	callArgs []*IServiceMockRegistrationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceMockRegistrationExpectation specifies expectation struct of the IService.Registration
type IServiceMockRegistrationExpectation struct {
	mock               *IServiceMock
	params             *IServiceMockRegistrationParams
	paramPtrs          *IServiceMockRegistrationParamPtrs
	expectationOrigins IServiceMockRegistrationExpectationOrigins
	results            *IServiceMockRegistrationResults
	returnOrigin       string
	Counter            uint64
}

// IServiceMockRegistrationParams contains parameters of the IService.Registration
type IServiceMockRegistrationParams struct {
	ctx                 context.Context
	registrationRequest *model.UserInfo
}

// IServiceMockRegistrationParamPtrs contains pointers to parameters of the IService.Registration
type IServiceMockRegistrationParamPtrs struct {
	ctx                 *context.Context
	registrationRequest **model.UserInfo
}

// IServiceMockRegistrationResults contains results of the IService.Registration
type IServiceMockRegistrationResults struct {
	ap1 *model.AuthResponse
	err error
}

// IServiceMockRegistrationOrigins contains origins of expectations of the IService.Registration
type IServiceMockRegistrationExpectationOrigins struct {
	origin                    string
	originCtx                 string
	originRegistrationRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRegistration *mIServiceMockRegistration) Optional() *mIServiceMockRegistration {
	mmRegistration.optional = true
	return mmRegistration
}

// Expect sets up expected params for IService.Registration
func (mmRegistration *mIServiceMockRegistration) Expect(ctx context.Context, registrationRequest *model.UserInfo) *mIServiceMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.paramPtrs != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by ExpectParams functions")
	}

	mmRegistration.defaultExpectation.params = &IServiceMockRegistrationParams{ctx, registrationRequest}
	mmRegistration.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRegistration.expectations {
		if minimock.Equal(e.params, mmRegistration.defaultExpectation.params) {
			mmRegistration.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRegistration.defaultExpectation.params)
		}
	}

	return mmRegistration
}

// ExpectCtxParam1 sets up expected param ctx for IService.Registration
func (mmRegistration *mIServiceMockRegistration) ExpectCtxParam1(ctx context.Context) *mIServiceMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &IServiceMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.ctx = &ctx
	mmRegistration.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRegistration
}

// ExpectRegistrationRequestParam2 sets up expected param registrationRequest for IService.Registration
func (mmRegistration *mIServiceMockRegistration) ExpectRegistrationRequestParam2(registrationRequest *model.UserInfo) *mIServiceMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &IServiceMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.registrationRequest = &registrationRequest
	mmRegistration.defaultExpectation.expectationOrigins.originRegistrationRequest = minimock.CallerInfo(1)

	return mmRegistration
}

// Inspect accepts an inspector function that has same arguments as the IService.Registration
func (mmRegistration *mIServiceMockRegistration) Inspect(f func(ctx context.Context, registrationRequest *model.UserInfo)) *mIServiceMockRegistration {
	if mmRegistration.mock.inspectFuncRegistration != nil {
		mmRegistration.mock.t.Fatalf("Inspect function is already set for IServiceMock.Registration")
	}

	mmRegistration.mock.inspectFuncRegistration = f

	return mmRegistration
}

// Return sets up results that will be returned by IService.Registration
func (mmRegistration *mIServiceMockRegistration) Return(ap1 *model.AuthResponse, err error) *IServiceMock {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceMockRegistrationExpectation{mock: mmRegistration.mock}
	}
	mmRegistration.defaultExpectation.results = &IServiceMockRegistrationResults{ap1, err}
	mmRegistration.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// Set uses given function f to mock the IService.Registration method
func (mmRegistration *mIServiceMockRegistration) Set(f func(ctx context.Context, registrationRequest *model.UserInfo) (ap1 *model.AuthResponse, err error)) *IServiceMock {
	if mmRegistration.defaultExpectation != nil {
		mmRegistration.mock.t.Fatalf("Default expectation is already set for the IService.Registration method")
	}

	if len(mmRegistration.expectations) > 0 {
		mmRegistration.mock.t.Fatalf("Some expectations are already set for the IService.Registration method")
	}

	mmRegistration.mock.funcRegistration = f
	mmRegistration.mock.funcRegistrationOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// When sets expectation for the IService.Registration which will trigger the result defined by the following
// Then helper
func (mmRegistration *mIServiceMockRegistration) When(ctx context.Context, registrationRequest *model.UserInfo) *IServiceMockRegistrationExpectation {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceMock.Registration mock is already set by Set")
	}

	expectation := &IServiceMockRegistrationExpectation{
		mock:               mmRegistration.mock,
		params:             &IServiceMockRegistrationParams{ctx, registrationRequest},
		expectationOrigins: IServiceMockRegistrationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRegistration.expectations = append(mmRegistration.expectations, expectation)
	return expectation
}

// Then sets up IService.Registration return parameters for the expectation previously defined by the When method
func (e *IServiceMockRegistrationExpectation) Then(ap1 *model.AuthResponse, err error) *IServiceMock {
	e.results = &IServiceMockRegistrationResults{ap1, err}
	return e.mock
}

// Times sets number of times IService.Registration should be invoked
func (mmRegistration *mIServiceMockRegistration) Times(n uint64) *mIServiceMockRegistration {
	if n == 0 {
		mmRegistration.mock.t.Fatalf("Times of IServiceMock.Registration mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRegistration.expectedInvocations, n)
	mmRegistration.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRegistration
}

func (mmRegistration *mIServiceMockRegistration) invocationsDone() bool {
	if len(mmRegistration.expectations) == 0 && mmRegistration.defaultExpectation == nil && mmRegistration.mock.funcRegistration == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRegistration.mock.afterRegistrationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRegistration.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Registration implements mm_service.IService
func (mmRegistration *IServiceMock) Registration(ctx context.Context, registrationRequest *model.UserInfo) (ap1 *model.AuthResponse, err error) {
	mm_atomic.AddUint64(&mmRegistration.beforeRegistrationCounter, 1)
	defer mm_atomic.AddUint64(&mmRegistration.afterRegistrationCounter, 1)

	mmRegistration.t.Helper()

	if mmRegistration.inspectFuncRegistration != nil {
		mmRegistration.inspectFuncRegistration(ctx, registrationRequest)
	}

	mm_params := IServiceMockRegistrationParams{ctx, registrationRequest}

	// Record call args
	mmRegistration.RegistrationMock.mutex.Lock()
	mmRegistration.RegistrationMock.callArgs = append(mmRegistration.RegistrationMock.callArgs, &mm_params)
	mmRegistration.RegistrationMock.mutex.Unlock()

	for _, e := range mmRegistration.RegistrationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmRegistration.RegistrationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRegistration.RegistrationMock.defaultExpectation.Counter, 1)
		mm_want := mmRegistration.RegistrationMock.defaultExpectation.params
		mm_want_ptrs := mmRegistration.RegistrationMock.defaultExpectation.paramPtrs

		mm_got := IServiceMockRegistrationParams{ctx, registrationRequest}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRegistration.t.Errorf("IServiceMock.Registration got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.registrationRequest != nil && !minimock.Equal(*mm_want_ptrs.registrationRequest, mm_got.registrationRequest) {
				mmRegistration.t.Errorf("IServiceMock.Registration got unexpected parameter registrationRequest, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originRegistrationRequest, *mm_want_ptrs.registrationRequest, mm_got.registrationRequest, minimock.Diff(*mm_want_ptrs.registrationRequest, mm_got.registrationRequest))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRegistration.t.Errorf("IServiceMock.Registration got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRegistration.RegistrationMock.defaultExpectation.results
		if mm_results == nil {
			mmRegistration.t.Fatal("No results are set for the IServiceMock.Registration")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmRegistration.funcRegistration != nil {
		return mmRegistration.funcRegistration(ctx, registrationRequest)
	}
	mmRegistration.t.Fatalf("Unexpected call to IServiceMock.Registration. %v %v", ctx, registrationRequest)
	return
}

// RegistrationAfterCounter returns a count of finished IServiceMock.Registration invocations
func (mmRegistration *IServiceMock) RegistrationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.afterRegistrationCounter)
}

// RegistrationBeforeCounter returns a count of IServiceMock.Registration invocations
func (mmRegistration *IServiceMock) RegistrationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.beforeRegistrationCounter)
}

// Calls returns a list of arguments used in each call to IServiceMock.Registration.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRegistration *mIServiceMockRegistration) Calls() []*IServiceMockRegistrationParams {
	mmRegistration.mutex.RLock()

	argCopy := make([]*IServiceMockRegistrationParams, len(mmRegistration.callArgs))
	copy(argCopy, mmRegistration.callArgs)

	mmRegistration.mutex.RUnlock()

	return argCopy
}

// MinimockRegistrationDone returns true if the count of the Registration invocations corresponds
// the number of defined expectations
func (m *IServiceMock) MinimockRegistrationDone() bool {
	if m.RegistrationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RegistrationMock.invocationsDone()
}

// MinimockRegistrationInspect logs each unmet expectation
func (m *IServiceMock) MinimockRegistrationInspect() {
	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceMock.Registration at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRegistrationCounter := mm_atomic.LoadUint64(&m.afterRegistrationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RegistrationMock.defaultExpectation != nil && afterRegistrationCounter < 1 {
		if m.RegistrationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceMock.Registration at\n%s", m.RegistrationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceMock.Registration at\n%s with params: %#v", m.RegistrationMock.defaultExpectation.expectationOrigins.origin, *m.RegistrationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegistration != nil && afterRegistrationCounter < 1 {
		m.t.Errorf("Expected call to IServiceMock.Registration at\n%s", m.funcRegistrationOrigin)
	}

	if !m.RegistrationMock.invocationsDone() && afterRegistrationCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceMock.Registration at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RegistrationMock.expectedInvocations), m.RegistrationMock.expectedInvocationsOrigin, afterRegistrationCounter)
	}
}

type mIServiceMockUpdatePassword struct {
	optional           bool
	mock               *IServiceMock
	defaultExpectation *IServiceMockUpdatePasswordExpectation
	expectations       []*IServiceMockUpdatePasswordExpectation

	callArgs []*IServiceMockUpdatePasswordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceMockUpdatePasswordExpectation specifies expectation struct of the IService.UpdatePassword
type IServiceMockUpdatePasswordExpectation struct {
	mock               *IServiceMock
	params             *IServiceMockUpdatePasswordParams
	paramPtrs          *IServiceMockUpdatePasswordParamPtrs
	expectationOrigins IServiceMockUpdatePasswordExpectationOrigins
	results            *IServiceMockUpdatePasswordResults
	returnOrigin       string
	Counter            uint64
}

// IServiceMockUpdatePasswordParams contains parameters of the IService.UpdatePassword
type IServiceMockUpdatePasswordParams struct {
	ctx            context.Context
	updatePassInfo *model.UpdatePassInfo
}

// IServiceMockUpdatePasswordParamPtrs contains pointers to parameters of the IService.UpdatePassword
type IServiceMockUpdatePasswordParamPtrs struct {
	ctx            *context.Context
	updatePassInfo **model.UpdatePassInfo
}

// IServiceMockUpdatePasswordResults contains results of the IService.UpdatePassword
type IServiceMockUpdatePasswordResults struct {
	err error
}

// IServiceMockUpdatePasswordOrigins contains origins of expectations of the IService.UpdatePassword
type IServiceMockUpdatePasswordExpectationOrigins struct {
	origin               string
	originCtx            string
	originUpdatePassInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdatePassword *mIServiceMockUpdatePassword) Optional() *mIServiceMockUpdatePassword {
	mmUpdatePassword.optional = true
	return mmUpdatePassword
}

// Expect sets up expected params for IService.UpdatePassword
func (mmUpdatePassword *mIServiceMockUpdatePassword) Expect(ctx context.Context, updatePassInfo *model.UpdatePassInfo) *mIServiceMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by ExpectParams functions")
	}

	mmUpdatePassword.defaultExpectation.params = &IServiceMockUpdatePasswordParams{ctx, updatePassInfo}
	mmUpdatePassword.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdatePassword.expectations {
		if minimock.Equal(e.params, mmUpdatePassword.defaultExpectation.params) {
			mmUpdatePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdatePassword.defaultExpectation.params)
		}
	}

	return mmUpdatePassword
}

// ExpectCtxParam1 sets up expected param ctx for IService.UpdatePassword
func (mmUpdatePassword *mIServiceMockUpdatePassword) ExpectCtxParam1(ctx context.Context) *mIServiceMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &IServiceMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdatePassword.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// ExpectUpdatePassInfoParam2 sets up expected param updatePassInfo for IService.UpdatePassword
func (mmUpdatePassword *mIServiceMockUpdatePassword) ExpectUpdatePassInfoParam2(updatePassInfo *model.UpdatePassInfo) *mIServiceMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &IServiceMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.updatePassInfo = &updatePassInfo
	mmUpdatePassword.defaultExpectation.expectationOrigins.originUpdatePassInfo = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// Inspect accepts an inspector function that has same arguments as the IService.UpdatePassword
func (mmUpdatePassword *mIServiceMockUpdatePassword) Inspect(f func(ctx context.Context, updatePassInfo *model.UpdatePassInfo)) *mIServiceMockUpdatePassword {
	if mmUpdatePassword.mock.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("Inspect function is already set for IServiceMock.UpdatePassword")
	}

	mmUpdatePassword.mock.inspectFuncUpdatePassword = f

	return mmUpdatePassword
}

// Return sets up results that will be returned by IService.UpdatePassword
func (mmUpdatePassword *mIServiceMockUpdatePassword) Return(err error) *IServiceMock {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceMockUpdatePasswordExpectation{mock: mmUpdatePassword.mock}
	}
	mmUpdatePassword.defaultExpectation.results = &IServiceMockUpdatePasswordResults{err}
	mmUpdatePassword.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// Set uses given function f to mock the IService.UpdatePassword method
func (mmUpdatePassword *mIServiceMockUpdatePassword) Set(f func(ctx context.Context, updatePassInfo *model.UpdatePassInfo) (err error)) *IServiceMock {
	if mmUpdatePassword.defaultExpectation != nil {
		mmUpdatePassword.mock.t.Fatalf("Default expectation is already set for the IService.UpdatePassword method")
	}

	if len(mmUpdatePassword.expectations) > 0 {
		mmUpdatePassword.mock.t.Fatalf("Some expectations are already set for the IService.UpdatePassword method")
	}

	mmUpdatePassword.mock.funcUpdatePassword = f
	mmUpdatePassword.mock.funcUpdatePasswordOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// When sets expectation for the IService.UpdatePassword which will trigger the result defined by the following
// Then helper
func (mmUpdatePassword *mIServiceMockUpdatePassword) When(ctx context.Context, updatePassInfo *model.UpdatePassInfo) *IServiceMockUpdatePasswordExpectation {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceMock.UpdatePassword mock is already set by Set")
	}

	expectation := &IServiceMockUpdatePasswordExpectation{
		mock:               mmUpdatePassword.mock,
		params:             &IServiceMockUpdatePasswordParams{ctx, updatePassInfo},
		expectationOrigins: IServiceMockUpdatePasswordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdatePassword.expectations = append(mmUpdatePassword.expectations, expectation)
	return expectation
}

// Then sets up IService.UpdatePassword return parameters for the expectation previously defined by the When method
func (e *IServiceMockUpdatePasswordExpectation) Then(err error) *IServiceMock {
	e.results = &IServiceMockUpdatePasswordResults{err}
	return e.mock
}

// Times sets number of times IService.UpdatePassword should be invoked
func (mmUpdatePassword *mIServiceMockUpdatePassword) Times(n uint64) *mIServiceMockUpdatePassword {
	if n == 0 {
		mmUpdatePassword.mock.t.Fatalf("Times of IServiceMock.UpdatePassword mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdatePassword.expectedInvocations, n)
	mmUpdatePassword.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword
}

func (mmUpdatePassword *mIServiceMockUpdatePassword) invocationsDone() bool {
	if len(mmUpdatePassword.expectations) == 0 && mmUpdatePassword.defaultExpectation == nil && mmUpdatePassword.mock.funcUpdatePassword == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.mock.afterUpdatePasswordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdatePassword implements mm_service.IService
func (mmUpdatePassword *IServiceMock) UpdatePassword(ctx context.Context, updatePassInfo *model.UpdatePassInfo) (err error) {
	mm_atomic.AddUint64(&mmUpdatePassword.beforeUpdatePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdatePassword.afterUpdatePasswordCounter, 1)

	mmUpdatePassword.t.Helper()

	if mmUpdatePassword.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.inspectFuncUpdatePassword(ctx, updatePassInfo)
	}

	mm_params := IServiceMockUpdatePasswordParams{ctx, updatePassInfo}

	// Record call args
	mmUpdatePassword.UpdatePasswordMock.mutex.Lock()
	mmUpdatePassword.UpdatePasswordMock.callArgs = append(mmUpdatePassword.UpdatePasswordMock.callArgs, &mm_params)
	mmUpdatePassword.UpdatePasswordMock.mutex.Unlock()

	for _, e := range mmUpdatePassword.UpdatePasswordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdatePassword.UpdatePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdatePassword.UpdatePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.params
		mm_want_ptrs := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.paramPtrs

		mm_got := IServiceMockUpdatePasswordParams{ctx, updatePassInfo}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdatePassword.t.Errorf("IServiceMock.UpdatePassword got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.updatePassInfo != nil && !minimock.Equal(*mm_want_ptrs.updatePassInfo, mm_got.updatePassInfo) {
				mmUpdatePassword.t.Errorf("IServiceMock.UpdatePassword got unexpected parameter updatePassInfo, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originUpdatePassInfo, *mm_want_ptrs.updatePassInfo, mm_got.updatePassInfo, minimock.Diff(*mm_want_ptrs.updatePassInfo, mm_got.updatePassInfo))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdatePassword.t.Errorf("IServiceMock.UpdatePassword got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdatePassword.t.Fatal("No results are set for the IServiceMock.UpdatePassword")
		}
		return (*mm_results).err
	}
	if mmUpdatePassword.funcUpdatePassword != nil {
		return mmUpdatePassword.funcUpdatePassword(ctx, updatePassInfo)
	}
	mmUpdatePassword.t.Fatalf("Unexpected call to IServiceMock.UpdatePassword. %v %v", ctx, updatePassInfo)
	return
}

// UpdatePasswordAfterCounter returns a count of finished IServiceMock.UpdatePassword invocations
func (mmUpdatePassword *IServiceMock) UpdatePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.afterUpdatePasswordCounter)
}

// UpdatePasswordBeforeCounter returns a count of IServiceMock.UpdatePassword invocations
func (mmUpdatePassword *IServiceMock) UpdatePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.beforeUpdatePasswordCounter)
}

// Calls returns a list of arguments used in each call to IServiceMock.UpdatePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdatePassword *mIServiceMockUpdatePassword) Calls() []*IServiceMockUpdatePasswordParams {
	mmUpdatePassword.mutex.RLock()

	argCopy := make([]*IServiceMockUpdatePasswordParams, len(mmUpdatePassword.callArgs))
	copy(argCopy, mmUpdatePassword.callArgs)

	mmUpdatePassword.mutex.RUnlock()

	return argCopy
}

// MinimockUpdatePasswordDone returns true if the count of the UpdatePassword invocations corresponds
// the number of defined expectations
func (m *IServiceMock) MinimockUpdatePasswordDone() bool {
	if m.UpdatePasswordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdatePasswordMock.invocationsDone()
}

// MinimockUpdatePasswordInspect logs each unmet expectation
func (m *IServiceMock) MinimockUpdatePasswordInspect() {
	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceMock.UpdatePassword at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdatePasswordCounter := mm_atomic.LoadUint64(&m.afterUpdatePasswordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdatePasswordMock.defaultExpectation != nil && afterUpdatePasswordCounter < 1 {
		if m.UpdatePasswordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceMock.UpdatePassword at\n%s", m.UpdatePasswordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceMock.UpdatePassword at\n%s with params: %#v", m.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *m.UpdatePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdatePassword != nil && afterUpdatePasswordCounter < 1 {
		m.t.Errorf("Expected call to IServiceMock.UpdatePassword at\n%s", m.funcUpdatePasswordOrigin)
	}

	if !m.UpdatePasswordMock.invocationsDone() && afterUpdatePasswordCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceMock.UpdatePassword at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdatePasswordMock.expectedInvocations), m.UpdatePasswordMock.expectedInvocationsOrigin, afterUpdatePasswordCounter)
	}
}

type mIServiceMockValidateToken struct {
	optional           bool
	mock               *IServiceMock
	defaultExpectation *IServiceMockValidateTokenExpectation
	expectations       []*IServiceMockValidateTokenExpectation

	callArgs []*IServiceMockValidateTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceMockValidateTokenExpectation specifies expectation struct of the IService.ValidateToken
type IServiceMockValidateTokenExpectation struct {
	mock               *IServiceMock
	params             *IServiceMockValidateTokenParams
	paramPtrs          *IServiceMockValidateTokenParamPtrs
	expectationOrigins IServiceMockValidateTokenExpectationOrigins
	results            *IServiceMockValidateTokenResults
	returnOrigin       string
	Counter            uint64
}

// IServiceMockValidateTokenParams contains parameters of the IService.ValidateToken
type IServiceMockValidateTokenParams struct {
	ctx         context.Context
	accessToken string
}

// IServiceMockValidateTokenParamPtrs contains pointers to parameters of the IService.ValidateToken
type IServiceMockValidateTokenParamPtrs struct {
	ctx         *context.Context
	accessToken *string
}

// IServiceMockValidateTokenResults contains results of the IService.ValidateToken
type IServiceMockValidateTokenResults struct {
	b1  bool
	err error
}

// IServiceMockValidateTokenOrigins contains origins of expectations of the IService.ValidateToken
type IServiceMockValidateTokenExpectationOrigins struct {
	origin            string
	originCtx         string
	originAccessToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateToken *mIServiceMockValidateToken) Optional() *mIServiceMockValidateToken {
	mmValidateToken.optional = true
	return mmValidateToken
}

// Expect sets up expected params for IService.ValidateToken
func (mmValidateToken *mIServiceMockValidateToken) Expect(ctx context.Context, accessToken string) *mIServiceMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.paramPtrs != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by ExpectParams functions")
	}

	mmValidateToken.defaultExpectation.params = &IServiceMockValidateTokenParams{ctx, accessToken}
	mmValidateToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateToken.expectations {
		if minimock.Equal(e.params, mmValidateToken.defaultExpectation.params) {
			mmValidateToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateToken.defaultExpectation.params)
		}
	}

	return mmValidateToken
}

// ExpectCtxParam1 sets up expected param ctx for IService.ValidateToken
func (mmValidateToken *mIServiceMockValidateToken) ExpectCtxParam1(ctx context.Context) *mIServiceMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &IServiceMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmValidateToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmValidateToken
}

// ExpectAccessTokenParam2 sets up expected param accessToken for IService.ValidateToken
func (mmValidateToken *mIServiceMockValidateToken) ExpectAccessTokenParam2(accessToken string) *mIServiceMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &IServiceMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.accessToken = &accessToken
	mmValidateToken.defaultExpectation.expectationOrigins.originAccessToken = minimock.CallerInfo(1)

	return mmValidateToken
}

// Inspect accepts an inspector function that has same arguments as the IService.ValidateToken
func (mmValidateToken *mIServiceMockValidateToken) Inspect(f func(ctx context.Context, accessToken string)) *mIServiceMockValidateToken {
	if mmValidateToken.mock.inspectFuncValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("Inspect function is already set for IServiceMock.ValidateToken")
	}

	mmValidateToken.mock.inspectFuncValidateToken = f

	return mmValidateToken
}

// Return sets up results that will be returned by IService.ValidateToken
func (mmValidateToken *mIServiceMockValidateToken) Return(b1 bool, err error) *IServiceMock {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceMockValidateTokenExpectation{mock: mmValidateToken.mock}
	}
	mmValidateToken.defaultExpectation.results = &IServiceMockValidateTokenResults{b1, err}
	mmValidateToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// Set uses given function f to mock the IService.ValidateToken method
func (mmValidateToken *mIServiceMockValidateToken) Set(f func(ctx context.Context, accessToken string) (b1 bool, err error)) *IServiceMock {
	if mmValidateToken.defaultExpectation != nil {
		mmValidateToken.mock.t.Fatalf("Default expectation is already set for the IService.ValidateToken method")
	}

	if len(mmValidateToken.expectations) > 0 {
		mmValidateToken.mock.t.Fatalf("Some expectations are already set for the IService.ValidateToken method")
	}

	mmValidateToken.mock.funcValidateToken = f
	mmValidateToken.mock.funcValidateTokenOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// When sets expectation for the IService.ValidateToken which will trigger the result defined by the following
// Then helper
func (mmValidateToken *mIServiceMockValidateToken) When(ctx context.Context, accessToken string) *IServiceMockValidateTokenExpectation {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceMock.ValidateToken mock is already set by Set")
	}

	expectation := &IServiceMockValidateTokenExpectation{
		mock:               mmValidateToken.mock,
		params:             &IServiceMockValidateTokenParams{ctx, accessToken},
		expectationOrigins: IServiceMockValidateTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateToken.expectations = append(mmValidateToken.expectations, expectation)
	return expectation
}

// Then sets up IService.ValidateToken return parameters for the expectation previously defined by the When method
func (e *IServiceMockValidateTokenExpectation) Then(b1 bool, err error) *IServiceMock {
	e.results = &IServiceMockValidateTokenResults{b1, err}
	return e.mock
}

// Times sets number of times IService.ValidateToken should be invoked
func (mmValidateToken *mIServiceMockValidateToken) Times(n uint64) *mIServiceMockValidateToken {
	if n == 0 {
		mmValidateToken.mock.t.Fatalf("Times of IServiceMock.ValidateToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateToken.expectedInvocations, n)
	mmValidateToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateToken
}

func (mmValidateToken *mIServiceMockValidateToken) invocationsDone() bool {
	if len(mmValidateToken.expectations) == 0 && mmValidateToken.defaultExpectation == nil && mmValidateToken.mock.funcValidateToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateToken.mock.afterValidateTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateToken implements mm_service.IService
func (mmValidateToken *IServiceMock) ValidateToken(ctx context.Context, accessToken string) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmValidateToken.beforeValidateTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateToken.afterValidateTokenCounter, 1)

	mmValidateToken.t.Helper()

	if mmValidateToken.inspectFuncValidateToken != nil {
		mmValidateToken.inspectFuncValidateToken(ctx, accessToken)
	}

	mm_params := IServiceMockValidateTokenParams{ctx, accessToken}

	// Record call args
	mmValidateToken.ValidateTokenMock.mutex.Lock()
	mmValidateToken.ValidateTokenMock.callArgs = append(mmValidateToken.ValidateTokenMock.callArgs, &mm_params)
	mmValidateToken.ValidateTokenMock.mutex.Unlock()

	for _, e := range mmValidateToken.ValidateTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmValidateToken.ValidateTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateToken.ValidateTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateToken.ValidateTokenMock.defaultExpectation.params
		mm_want_ptrs := mmValidateToken.ValidateTokenMock.defaultExpectation.paramPtrs

		mm_got := IServiceMockValidateTokenParams{ctx, accessToken}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmValidateToken.t.Errorf("IServiceMock.ValidateToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.accessToken != nil && !minimock.Equal(*mm_want_ptrs.accessToken, mm_got.accessToken) {
				mmValidateToken.t.Errorf("IServiceMock.ValidateToken got unexpected parameter accessToken, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originAccessToken, *mm_want_ptrs.accessToken, mm_got.accessToken, minimock.Diff(*mm_want_ptrs.accessToken, mm_got.accessToken))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateToken.t.Errorf("IServiceMock.ValidateToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateToken.ValidateTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateToken.t.Fatal("No results are set for the IServiceMock.ValidateToken")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmValidateToken.funcValidateToken != nil {
		return mmValidateToken.funcValidateToken(ctx, accessToken)
	}
	mmValidateToken.t.Fatalf("Unexpected call to IServiceMock.ValidateToken. %v %v", ctx, accessToken)
	return
}

// ValidateTokenAfterCounter returns a count of finished IServiceMock.ValidateToken invocations
func (mmValidateToken *IServiceMock) ValidateTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.afterValidateTokenCounter)
}

// ValidateTokenBeforeCounter returns a count of IServiceMock.ValidateToken invocations
func (mmValidateToken *IServiceMock) ValidateTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.beforeValidateTokenCounter)
}

// Calls returns a list of arguments used in each call to IServiceMock.ValidateToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateToken *mIServiceMockValidateToken) Calls() []*IServiceMockValidateTokenParams {
	mmValidateToken.mutex.RLock()

	argCopy := make([]*IServiceMockValidateTokenParams, len(mmValidateToken.callArgs))
	copy(argCopy, mmValidateToken.callArgs)

	mmValidateToken.mutex.RUnlock()

	return argCopy
}

// MinimockValidateTokenDone returns true if the count of the ValidateToken invocations corresponds
// the number of defined expectations
func (m *IServiceMock) MinimockValidateTokenDone() bool {
	if m.ValidateTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateTokenMock.invocationsDone()
}

// MinimockValidateTokenInspect logs each unmet expectation
func (m *IServiceMock) MinimockValidateTokenInspect() {
	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceMock.ValidateToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateTokenCounter := mm_atomic.LoadUint64(&m.afterValidateTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateTokenMock.defaultExpectation != nil && afterValidateTokenCounter < 1 {
		if m.ValidateTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceMock.ValidateToken at\n%s", m.ValidateTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceMock.ValidateToken at\n%s with params: %#v", m.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *m.ValidateTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateToken != nil && afterValidateTokenCounter < 1 {
		m.t.Errorf("Expected call to IServiceMock.ValidateToken at\n%s", m.funcValidateTokenOrigin)
	}

	if !m.ValidateTokenMock.invocationsDone() && afterValidateTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceMock.ValidateToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateTokenMock.expectedInvocations), m.ValidateTokenMock.expectedInvocationsOrigin, afterValidateTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetAccessTokenInspect()

			m.MinimockLoginInspect()

			m.MinimockRegistrationInspect()

			m.MinimockUpdatePasswordInspect()

			m.MinimockValidateTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAccessTokenDone() &&
		m.MinimockLoginDone() &&
		m.MinimockRegistrationDone() &&
		m.MinimockUpdatePasswordDone() &&
		m.MinimockValidateTokenDone()
}

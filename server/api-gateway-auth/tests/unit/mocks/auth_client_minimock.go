// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/AwesomeXjs/registration-service-with-checking-mail/server/api-gateway-auth/internal/client/auth_client.AuthClient -o auth_client_minimock.go -n AuthClientMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	authService "github.com/AwesomeXjs/registration-service-with-checking-mail/server/auth-service/pkg/auth_v1"
	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// AuthClientMock implements mm_auth_client.AuthClient
type AuthClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetAccessToken          func(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption) (gp1 *authService.GetAccessTokenResponse, err error)
	funcGetAccessTokenOrigin    string
	inspectFuncGetAccessToken   func(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption)
	afterGetAccessTokenCounter  uint64
	beforeGetAccessTokenCounter uint64
	GetAccessTokenMock          mAuthClientMockGetAccessToken

	funcLogin          func(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption) (lp1 *authService.LoginResponse, err error)
	funcLoginOrigin    string
	inspectFuncLogin   func(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption)
	afterLoginCounter  uint64
	beforeLoginCounter uint64
	LoginMock          mAuthClientMockLogin

	funcRegistration          func(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption) (rp1 *authService.RegistrationResponse, err error)
	funcRegistrationOrigin    string
	inspectFuncRegistration   func(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption)
	afterRegistrationCounter  uint64
	beforeRegistrationCounter uint64
	RegistrationMock          mAuthClientMockRegistration

	funcUpdatePassword          func(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	funcUpdatePasswordOrigin    string
	inspectFuncUpdatePassword   func(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption)
	afterUpdatePasswordCounter  uint64
	beforeUpdatePasswordCounter uint64
	UpdatePasswordMock          mAuthClientMockUpdatePassword

	funcValidateToken          func(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	funcValidateTokenOrigin    string
	inspectFuncValidateToken   func(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption)
	afterValidateTokenCounter  uint64
	beforeValidateTokenCounter uint64
	ValidateTokenMock          mAuthClientMockValidateToken
}

// NewAuthClientMock returns a mock for mm_auth_client.AuthClient
func NewAuthClientMock(t minimock.Tester) *AuthClientMock {
	m := &AuthClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAccessTokenMock = mAuthClientMockGetAccessToken{mock: m}
	m.GetAccessTokenMock.callArgs = []*AuthClientMockGetAccessTokenParams{}

	m.LoginMock = mAuthClientMockLogin{mock: m}
	m.LoginMock.callArgs = []*AuthClientMockLoginParams{}

	m.RegistrationMock = mAuthClientMockRegistration{mock: m}
	m.RegistrationMock.callArgs = []*AuthClientMockRegistrationParams{}

	m.UpdatePasswordMock = mAuthClientMockUpdatePassword{mock: m}
	m.UpdatePasswordMock.callArgs = []*AuthClientMockUpdatePasswordParams{}

	m.ValidateTokenMock = mAuthClientMockValidateToken{mock: m}
	m.ValidateTokenMock.callArgs = []*AuthClientMockValidateTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthClientMockGetAccessToken struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockGetAccessTokenExpectation
	expectations       []*AuthClientMockGetAccessTokenExpectation

	callArgs []*AuthClientMockGetAccessTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockGetAccessTokenExpectation specifies expectation struct of the AuthClient.GetAccessToken
type AuthClientMockGetAccessTokenExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockGetAccessTokenParams
	paramPtrs          *AuthClientMockGetAccessTokenParamPtrs
	expectationOrigins AuthClientMockGetAccessTokenExpectationOrigins
	results            *AuthClientMockGetAccessTokenResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockGetAccessTokenParams contains parameters of the AuthClient.GetAccessToken
type AuthClientMockGetAccessTokenParams struct {
	ctx  context.Context
	in   *authService.GetAccessTokenRequest
	opts []grpc.CallOption
}

// AuthClientMockGetAccessTokenParamPtrs contains pointers to parameters of the AuthClient.GetAccessToken
type AuthClientMockGetAccessTokenParamPtrs struct {
	ctx  *context.Context
	in   **authService.GetAccessTokenRequest
	opts *[]grpc.CallOption
}

// AuthClientMockGetAccessTokenResults contains results of the AuthClient.GetAccessToken
type AuthClientMockGetAccessTokenResults struct {
	gp1 *authService.GetAccessTokenResponse
	err error
}

// AuthClientMockGetAccessTokenOrigins contains origins of expectations of the AuthClient.GetAccessToken
type AuthClientMockGetAccessTokenExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Optional() *mAuthClientMockGetAccessToken {
	mmGetAccessToken.optional = true
	return mmGetAccessToken
}

// Expect sets up expected params for AuthClient.GetAccessToken
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Expect(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption) *mAuthClientMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &AuthClientMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by ExpectParams functions")
	}

	mmGetAccessToken.defaultExpectation.params = &AuthClientMockGetAccessTokenParams{ctx, in, opts}
	mmGetAccessToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAccessToken.expectations {
		if minimock.Equal(e.params, mmGetAccessToken.defaultExpectation.params) {
			mmGetAccessToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAccessToken.defaultExpectation.params)
		}
	}

	return mmGetAccessToken
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.GetAccessToken
func (mmGetAccessToken *mAuthClientMockGetAccessToken) ExpectCtxParam1(ctx context.Context) *mAuthClientMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &AuthClientMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &AuthClientMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAccessToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// ExpectInParam2 sets up expected param in for AuthClient.GetAccessToken
func (mmGetAccessToken *mAuthClientMockGetAccessToken) ExpectInParam2(in *authService.GetAccessTokenRequest) *mAuthClientMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &AuthClientMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &AuthClientMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.in = &in
	mmGetAccessToken.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.GetAccessToken
func (mmGetAccessToken *mAuthClientMockGetAccessToken) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &AuthClientMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &AuthClientMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.opts = &opts
	mmGetAccessToken.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.GetAccessToken
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Inspect(f func(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption)) *mAuthClientMockGetAccessToken {
	if mmGetAccessToken.mock.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("Inspect function is already set for AuthClientMock.GetAccessToken")
	}

	mmGetAccessToken.mock.inspectFuncGetAccessToken = f

	return mmGetAccessToken
}

// Return sets up results that will be returned by AuthClient.GetAccessToken
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Return(gp1 *authService.GetAccessTokenResponse, err error) *AuthClientMock {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &AuthClientMockGetAccessTokenExpectation{mock: mmGetAccessToken.mock}
	}
	mmGetAccessToken.defaultExpectation.results = &AuthClientMockGetAccessTokenResults{gp1, err}
	mmGetAccessToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// Set uses given function f to mock the AuthClient.GetAccessToken method
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Set(f func(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption) (gp1 *authService.GetAccessTokenResponse, err error)) *AuthClientMock {
	if mmGetAccessToken.defaultExpectation != nil {
		mmGetAccessToken.mock.t.Fatalf("Default expectation is already set for the AuthClient.GetAccessToken method")
	}

	if len(mmGetAccessToken.expectations) > 0 {
		mmGetAccessToken.mock.t.Fatalf("Some expectations are already set for the AuthClient.GetAccessToken method")
	}

	mmGetAccessToken.mock.funcGetAccessToken = f
	mmGetAccessToken.mock.funcGetAccessTokenOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// When sets expectation for the AuthClient.GetAccessToken which will trigger the result defined by the following
// Then helper
func (mmGetAccessToken *mAuthClientMockGetAccessToken) When(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption) *AuthClientMockGetAccessTokenExpectation {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("AuthClientMock.GetAccessToken mock is already set by Set")
	}

	expectation := &AuthClientMockGetAccessTokenExpectation{
		mock:               mmGetAccessToken.mock,
		params:             &AuthClientMockGetAccessTokenParams{ctx, in, opts},
		expectationOrigins: AuthClientMockGetAccessTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAccessToken.expectations = append(mmGetAccessToken.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.GetAccessToken return parameters for the expectation previously defined by the When method
func (e *AuthClientMockGetAccessTokenExpectation) Then(gp1 *authService.GetAccessTokenResponse, err error) *AuthClientMock {
	e.results = &AuthClientMockGetAccessTokenResults{gp1, err}
	return e.mock
}

// Times sets number of times AuthClient.GetAccessToken should be invoked
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Times(n uint64) *mAuthClientMockGetAccessToken {
	if n == 0 {
		mmGetAccessToken.mock.t.Fatalf("Times of AuthClientMock.GetAccessToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAccessToken.expectedInvocations, n)
	mmGetAccessToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken
}

func (mmGetAccessToken *mAuthClientMockGetAccessToken) invocationsDone() bool {
	if len(mmGetAccessToken.expectations) == 0 && mmGetAccessToken.defaultExpectation == nil && mmGetAccessToken.mock.funcGetAccessToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.mock.afterGetAccessTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAccessToken implements mm_auth_client.AuthClient
func (mmGetAccessToken *AuthClientMock) GetAccessToken(ctx context.Context, in *authService.GetAccessTokenRequest, opts ...grpc.CallOption) (gp1 *authService.GetAccessTokenResponse, err error) {
	mm_atomic.AddUint64(&mmGetAccessToken.beforeGetAccessTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessToken.afterGetAccessTokenCounter, 1)

	mmGetAccessToken.t.Helper()

	if mmGetAccessToken.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.inspectFuncGetAccessToken(ctx, in, opts...)
	}

	mm_params := AuthClientMockGetAccessTokenParams{ctx, in, opts}

	// Record call args
	mmGetAccessToken.GetAccessTokenMock.mutex.Lock()
	mmGetAccessToken.GetAccessTokenMock.callArgs = append(mmGetAccessToken.GetAccessTokenMock.callArgs, &mm_params)
	mmGetAccessToken.GetAccessTokenMock.mutex.Unlock()

	for _, e := range mmGetAccessToken.GetAccessTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetAccessToken.GetAccessTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessToken.GetAccessTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.params
		mm_want_ptrs := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockGetAccessTokenParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAccessToken.t.Errorf("AuthClientMock.GetAccessToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetAccessToken.t.Errorf("AuthClientMock.GetAccessToken got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetAccessToken.t.Errorf("AuthClientMock.GetAccessToken got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAccessToken.t.Errorf("AuthClientMock.GetAccessToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAccessToken.t.Fatal("No results are set for the AuthClientMock.GetAccessToken")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetAccessToken.funcGetAccessToken != nil {
		return mmGetAccessToken.funcGetAccessToken(ctx, in, opts...)
	}
	mmGetAccessToken.t.Fatalf("Unexpected call to AuthClientMock.GetAccessToken. %v %v %v", ctx, in, opts)
	return
}

// GetAccessTokenAfterCounter returns a count of finished AuthClientMock.GetAccessToken invocations
func (mmGetAccessToken *AuthClientMock) GetAccessTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.afterGetAccessTokenCounter)
}

// GetAccessTokenBeforeCounter returns a count of AuthClientMock.GetAccessToken invocations
func (mmGetAccessToken *AuthClientMock) GetAccessTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.beforeGetAccessTokenCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.GetAccessToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAccessToken *mAuthClientMockGetAccessToken) Calls() []*AuthClientMockGetAccessTokenParams {
	mmGetAccessToken.mutex.RLock()

	argCopy := make([]*AuthClientMockGetAccessTokenParams, len(mmGetAccessToken.callArgs))
	copy(argCopy, mmGetAccessToken.callArgs)

	mmGetAccessToken.mutex.RUnlock()

	return argCopy
}

// MinimockGetAccessTokenDone returns true if the count of the GetAccessToken invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockGetAccessTokenDone() bool {
	if m.GetAccessTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAccessTokenMock.invocationsDone()
}

// MinimockGetAccessTokenInspect logs each unmet expectation
func (m *AuthClientMock) MinimockGetAccessTokenInspect() {
	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.GetAccessToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAccessTokenCounter := mm_atomic.LoadUint64(&m.afterGetAccessTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessTokenMock.defaultExpectation != nil && afterGetAccessTokenCounter < 1 {
		if m.GetAccessTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.GetAccessToken at\n%s", m.GetAccessTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.GetAccessToken at\n%s with params: %#v", m.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *m.GetAccessTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessToken != nil && afterGetAccessTokenCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.GetAccessToken at\n%s", m.funcGetAccessTokenOrigin)
	}

	if !m.GetAccessTokenMock.invocationsDone() && afterGetAccessTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.GetAccessToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAccessTokenMock.expectedInvocations), m.GetAccessTokenMock.expectedInvocationsOrigin, afterGetAccessTokenCounter)
	}
}

type mAuthClientMockLogin struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockLoginExpectation
	expectations       []*AuthClientMockLoginExpectation

	callArgs []*AuthClientMockLoginParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockLoginExpectation specifies expectation struct of the AuthClient.Login
type AuthClientMockLoginExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockLoginParams
	paramPtrs          *AuthClientMockLoginParamPtrs
	expectationOrigins AuthClientMockLoginExpectationOrigins
	results            *AuthClientMockLoginResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockLoginParams contains parameters of the AuthClient.Login
type AuthClientMockLoginParams struct {
	ctx  context.Context
	in   *authService.LoginRequest
	opts []grpc.CallOption
}

// AuthClientMockLoginParamPtrs contains pointers to parameters of the AuthClient.Login
type AuthClientMockLoginParamPtrs struct {
	ctx  *context.Context
	in   **authService.LoginRequest
	opts *[]grpc.CallOption
}

// AuthClientMockLoginResults contains results of the AuthClient.Login
type AuthClientMockLoginResults struct {
	lp1 *authService.LoginResponse
	err error
}

// AuthClientMockLoginOrigins contains origins of expectations of the AuthClient.Login
type AuthClientMockLoginExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogin *mAuthClientMockLogin) Optional() *mAuthClientMockLogin {
	mmLogin.optional = true
	return mmLogin
}

// Expect sets up expected params for AuthClient.Login
func (mmLogin *mAuthClientMockLogin) Expect(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption) *mAuthClientMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthClientMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.paramPtrs != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by ExpectParams functions")
	}

	mmLogin.defaultExpectation.params = &AuthClientMockLoginParams{ctx, in, opts}
	mmLogin.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogin.expectations {
		if minimock.Equal(e.params, mmLogin.defaultExpectation.params) {
			mmLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogin.defaultExpectation.params)
		}
	}

	return mmLogin
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.Login
func (mmLogin *mAuthClientMockLogin) ExpectCtxParam1(ctx context.Context) *mAuthClientMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthClientMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &AuthClientMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.ctx = &ctx
	mmLogin.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectInParam2 sets up expected param in for AuthClient.Login
func (mmLogin *mAuthClientMockLogin) ExpectInParam2(in *authService.LoginRequest) *mAuthClientMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthClientMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &AuthClientMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.in = &in
	mmLogin.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.Login
func (mmLogin *mAuthClientMockLogin) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthClientMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &AuthClientMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.opts = &opts
	mmLogin.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmLogin
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.Login
func (mmLogin *mAuthClientMockLogin) Inspect(f func(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption)) *mAuthClientMockLogin {
	if mmLogin.mock.inspectFuncLogin != nil {
		mmLogin.mock.t.Fatalf("Inspect function is already set for AuthClientMock.Login")
	}

	mmLogin.mock.inspectFuncLogin = f

	return mmLogin
}

// Return sets up results that will be returned by AuthClient.Login
func (mmLogin *mAuthClientMockLogin) Return(lp1 *authService.LoginResponse, err error) *AuthClientMock {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthClientMockLoginExpectation{mock: mmLogin.mock}
	}
	mmLogin.defaultExpectation.results = &AuthClientMockLoginResults{lp1, err}
	mmLogin.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// Set uses given function f to mock the AuthClient.Login method
func (mmLogin *mAuthClientMockLogin) Set(f func(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption) (lp1 *authService.LoginResponse, err error)) *AuthClientMock {
	if mmLogin.defaultExpectation != nil {
		mmLogin.mock.t.Fatalf("Default expectation is already set for the AuthClient.Login method")
	}

	if len(mmLogin.expectations) > 0 {
		mmLogin.mock.t.Fatalf("Some expectations are already set for the AuthClient.Login method")
	}

	mmLogin.mock.funcLogin = f
	mmLogin.mock.funcLoginOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// When sets expectation for the AuthClient.Login which will trigger the result defined by the following
// Then helper
func (mmLogin *mAuthClientMockLogin) When(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption) *AuthClientMockLoginExpectation {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthClientMock.Login mock is already set by Set")
	}

	expectation := &AuthClientMockLoginExpectation{
		mock:               mmLogin.mock,
		params:             &AuthClientMockLoginParams{ctx, in, opts},
		expectationOrigins: AuthClientMockLoginExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogin.expectations = append(mmLogin.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.Login return parameters for the expectation previously defined by the When method
func (e *AuthClientMockLoginExpectation) Then(lp1 *authService.LoginResponse, err error) *AuthClientMock {
	e.results = &AuthClientMockLoginResults{lp1, err}
	return e.mock
}

// Times sets number of times AuthClient.Login should be invoked
func (mmLogin *mAuthClientMockLogin) Times(n uint64) *mAuthClientMockLogin {
	if n == 0 {
		mmLogin.mock.t.Fatalf("Times of AuthClientMock.Login mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogin.expectedInvocations, n)
	mmLogin.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogin
}

func (mmLogin *mAuthClientMockLogin) invocationsDone() bool {
	if len(mmLogin.expectations) == 0 && mmLogin.defaultExpectation == nil && mmLogin.mock.funcLogin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogin.mock.afterLoginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Login implements mm_auth_client.AuthClient
func (mmLogin *AuthClientMock) Login(ctx context.Context, in *authService.LoginRequest, opts ...grpc.CallOption) (lp1 *authService.LoginResponse, err error) {
	mm_atomic.AddUint64(&mmLogin.beforeLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmLogin.afterLoginCounter, 1)

	mmLogin.t.Helper()

	if mmLogin.inspectFuncLogin != nil {
		mmLogin.inspectFuncLogin(ctx, in, opts...)
	}

	mm_params := AuthClientMockLoginParams{ctx, in, opts}

	// Record call args
	mmLogin.LoginMock.mutex.Lock()
	mmLogin.LoginMock.callArgs = append(mmLogin.LoginMock.callArgs, &mm_params)
	mmLogin.LoginMock.mutex.Unlock()

	for _, e := range mmLogin.LoginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmLogin.LoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogin.LoginMock.defaultExpectation.Counter, 1)
		mm_want := mmLogin.LoginMock.defaultExpectation.params
		mm_want_ptrs := mmLogin.LoginMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockLoginParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLogin.t.Errorf("AuthClientMock.Login got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmLogin.t.Errorf("AuthClientMock.Login got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmLogin.t.Errorf("AuthClientMock.Login got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogin.t.Errorf("AuthClientMock.Login got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogin.LoginMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogin.LoginMock.defaultExpectation.results
		if mm_results == nil {
			mmLogin.t.Fatal("No results are set for the AuthClientMock.Login")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmLogin.funcLogin != nil {
		return mmLogin.funcLogin(ctx, in, opts...)
	}
	mmLogin.t.Fatalf("Unexpected call to AuthClientMock.Login. %v %v %v", ctx, in, opts)
	return
}

// LoginAfterCounter returns a count of finished AuthClientMock.Login invocations
func (mmLogin *AuthClientMock) LoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.afterLoginCounter)
}

// LoginBeforeCounter returns a count of AuthClientMock.Login invocations
func (mmLogin *AuthClientMock) LoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.beforeLoginCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.Login.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogin *mAuthClientMockLogin) Calls() []*AuthClientMockLoginParams {
	mmLogin.mutex.RLock()

	argCopy := make([]*AuthClientMockLoginParams, len(mmLogin.callArgs))
	copy(argCopy, mmLogin.callArgs)

	mmLogin.mutex.RUnlock()

	return argCopy
}

// MinimockLoginDone returns true if the count of the Login invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockLoginDone() bool {
	if m.LoginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LoginMock.invocationsDone()
}

// MinimockLoginInspect logs each unmet expectation
func (m *AuthClientMock) MinimockLoginInspect() {
	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.Login at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLoginCounter := mm_atomic.LoadUint64(&m.afterLoginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LoginMock.defaultExpectation != nil && afterLoginCounter < 1 {
		if m.LoginMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.Login at\n%s", m.LoginMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.Login at\n%s with params: %#v", m.LoginMock.defaultExpectation.expectationOrigins.origin, *m.LoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogin != nil && afterLoginCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.Login at\n%s", m.funcLoginOrigin)
	}

	if !m.LoginMock.invocationsDone() && afterLoginCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.Login at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LoginMock.expectedInvocations), m.LoginMock.expectedInvocationsOrigin, afterLoginCounter)
	}
}

type mAuthClientMockRegistration struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockRegistrationExpectation
	expectations       []*AuthClientMockRegistrationExpectation

	callArgs []*AuthClientMockRegistrationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockRegistrationExpectation specifies expectation struct of the AuthClient.Registration
type AuthClientMockRegistrationExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockRegistrationParams
	paramPtrs          *AuthClientMockRegistrationParamPtrs
	expectationOrigins AuthClientMockRegistrationExpectationOrigins
	results            *AuthClientMockRegistrationResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockRegistrationParams contains parameters of the AuthClient.Registration
type AuthClientMockRegistrationParams struct {
	ctx  context.Context
	in   *authService.RegistrationRequest
	opts []grpc.CallOption
}

// AuthClientMockRegistrationParamPtrs contains pointers to parameters of the AuthClient.Registration
type AuthClientMockRegistrationParamPtrs struct {
	ctx  *context.Context
	in   **authService.RegistrationRequest
	opts *[]grpc.CallOption
}

// AuthClientMockRegistrationResults contains results of the AuthClient.Registration
type AuthClientMockRegistrationResults struct {
	rp1 *authService.RegistrationResponse
	err error
}

// AuthClientMockRegistrationOrigins contains origins of expectations of the AuthClient.Registration
type AuthClientMockRegistrationExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRegistration *mAuthClientMockRegistration) Optional() *mAuthClientMockRegistration {
	mmRegistration.optional = true
	return mmRegistration
}

// Expect sets up expected params for AuthClient.Registration
func (mmRegistration *mAuthClientMockRegistration) Expect(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption) *mAuthClientMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &AuthClientMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.paramPtrs != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by ExpectParams functions")
	}

	mmRegistration.defaultExpectation.params = &AuthClientMockRegistrationParams{ctx, in, opts}
	mmRegistration.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRegistration.expectations {
		if minimock.Equal(e.params, mmRegistration.defaultExpectation.params) {
			mmRegistration.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRegistration.defaultExpectation.params)
		}
	}

	return mmRegistration
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.Registration
func (mmRegistration *mAuthClientMockRegistration) ExpectCtxParam1(ctx context.Context) *mAuthClientMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &AuthClientMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &AuthClientMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.ctx = &ctx
	mmRegistration.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRegistration
}

// ExpectInParam2 sets up expected param in for AuthClient.Registration
func (mmRegistration *mAuthClientMockRegistration) ExpectInParam2(in *authService.RegistrationRequest) *mAuthClientMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &AuthClientMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &AuthClientMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.in = &in
	mmRegistration.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmRegistration
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.Registration
func (mmRegistration *mAuthClientMockRegistration) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &AuthClientMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &AuthClientMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.opts = &opts
	mmRegistration.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmRegistration
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.Registration
func (mmRegistration *mAuthClientMockRegistration) Inspect(f func(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption)) *mAuthClientMockRegistration {
	if mmRegistration.mock.inspectFuncRegistration != nil {
		mmRegistration.mock.t.Fatalf("Inspect function is already set for AuthClientMock.Registration")
	}

	mmRegistration.mock.inspectFuncRegistration = f

	return mmRegistration
}

// Return sets up results that will be returned by AuthClient.Registration
func (mmRegistration *mAuthClientMockRegistration) Return(rp1 *authService.RegistrationResponse, err error) *AuthClientMock {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &AuthClientMockRegistrationExpectation{mock: mmRegistration.mock}
	}
	mmRegistration.defaultExpectation.results = &AuthClientMockRegistrationResults{rp1, err}
	mmRegistration.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// Set uses given function f to mock the AuthClient.Registration method
func (mmRegistration *mAuthClientMockRegistration) Set(f func(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption) (rp1 *authService.RegistrationResponse, err error)) *AuthClientMock {
	if mmRegistration.defaultExpectation != nil {
		mmRegistration.mock.t.Fatalf("Default expectation is already set for the AuthClient.Registration method")
	}

	if len(mmRegistration.expectations) > 0 {
		mmRegistration.mock.t.Fatalf("Some expectations are already set for the AuthClient.Registration method")
	}

	mmRegistration.mock.funcRegistration = f
	mmRegistration.mock.funcRegistrationOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// When sets expectation for the AuthClient.Registration which will trigger the result defined by the following
// Then helper
func (mmRegistration *mAuthClientMockRegistration) When(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption) *AuthClientMockRegistrationExpectation {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("AuthClientMock.Registration mock is already set by Set")
	}

	expectation := &AuthClientMockRegistrationExpectation{
		mock:               mmRegistration.mock,
		params:             &AuthClientMockRegistrationParams{ctx, in, opts},
		expectationOrigins: AuthClientMockRegistrationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRegistration.expectations = append(mmRegistration.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.Registration return parameters for the expectation previously defined by the When method
func (e *AuthClientMockRegistrationExpectation) Then(rp1 *authService.RegistrationResponse, err error) *AuthClientMock {
	e.results = &AuthClientMockRegistrationResults{rp1, err}
	return e.mock
}

// Times sets number of times AuthClient.Registration should be invoked
func (mmRegistration *mAuthClientMockRegistration) Times(n uint64) *mAuthClientMockRegistration {
	if n == 0 {
		mmRegistration.mock.t.Fatalf("Times of AuthClientMock.Registration mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRegistration.expectedInvocations, n)
	mmRegistration.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRegistration
}

func (mmRegistration *mAuthClientMockRegistration) invocationsDone() bool {
	if len(mmRegistration.expectations) == 0 && mmRegistration.defaultExpectation == nil && mmRegistration.mock.funcRegistration == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRegistration.mock.afterRegistrationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRegistration.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Registration implements mm_auth_client.AuthClient
func (mmRegistration *AuthClientMock) Registration(ctx context.Context, in *authService.RegistrationRequest, opts ...grpc.CallOption) (rp1 *authService.RegistrationResponse, err error) {
	mm_atomic.AddUint64(&mmRegistration.beforeRegistrationCounter, 1)
	defer mm_atomic.AddUint64(&mmRegistration.afterRegistrationCounter, 1)

	mmRegistration.t.Helper()

	if mmRegistration.inspectFuncRegistration != nil {
		mmRegistration.inspectFuncRegistration(ctx, in, opts...)
	}

	mm_params := AuthClientMockRegistrationParams{ctx, in, opts}

	// Record call args
	mmRegistration.RegistrationMock.mutex.Lock()
	mmRegistration.RegistrationMock.callArgs = append(mmRegistration.RegistrationMock.callArgs, &mm_params)
	mmRegistration.RegistrationMock.mutex.Unlock()

	for _, e := range mmRegistration.RegistrationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmRegistration.RegistrationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRegistration.RegistrationMock.defaultExpectation.Counter, 1)
		mm_want := mmRegistration.RegistrationMock.defaultExpectation.params
		mm_want_ptrs := mmRegistration.RegistrationMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockRegistrationParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRegistration.t.Errorf("AuthClientMock.Registration got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmRegistration.t.Errorf("AuthClientMock.Registration got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmRegistration.t.Errorf("AuthClientMock.Registration got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRegistration.t.Errorf("AuthClientMock.Registration got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRegistration.RegistrationMock.defaultExpectation.results
		if mm_results == nil {
			mmRegistration.t.Fatal("No results are set for the AuthClientMock.Registration")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmRegistration.funcRegistration != nil {
		return mmRegistration.funcRegistration(ctx, in, opts...)
	}
	mmRegistration.t.Fatalf("Unexpected call to AuthClientMock.Registration. %v %v %v", ctx, in, opts)
	return
}

// RegistrationAfterCounter returns a count of finished AuthClientMock.Registration invocations
func (mmRegistration *AuthClientMock) RegistrationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.afterRegistrationCounter)
}

// RegistrationBeforeCounter returns a count of AuthClientMock.Registration invocations
func (mmRegistration *AuthClientMock) RegistrationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.beforeRegistrationCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.Registration.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRegistration *mAuthClientMockRegistration) Calls() []*AuthClientMockRegistrationParams {
	mmRegistration.mutex.RLock()

	argCopy := make([]*AuthClientMockRegistrationParams, len(mmRegistration.callArgs))
	copy(argCopy, mmRegistration.callArgs)

	mmRegistration.mutex.RUnlock()

	return argCopy
}

// MinimockRegistrationDone returns true if the count of the Registration invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockRegistrationDone() bool {
	if m.RegistrationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RegistrationMock.invocationsDone()
}

// MinimockRegistrationInspect logs each unmet expectation
func (m *AuthClientMock) MinimockRegistrationInspect() {
	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.Registration at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRegistrationCounter := mm_atomic.LoadUint64(&m.afterRegistrationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RegistrationMock.defaultExpectation != nil && afterRegistrationCounter < 1 {
		if m.RegistrationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.Registration at\n%s", m.RegistrationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.Registration at\n%s with params: %#v", m.RegistrationMock.defaultExpectation.expectationOrigins.origin, *m.RegistrationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegistration != nil && afterRegistrationCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.Registration at\n%s", m.funcRegistrationOrigin)
	}

	if !m.RegistrationMock.invocationsDone() && afterRegistrationCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.Registration at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RegistrationMock.expectedInvocations), m.RegistrationMock.expectedInvocationsOrigin, afterRegistrationCounter)
	}
}

type mAuthClientMockUpdatePassword struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockUpdatePasswordExpectation
	expectations       []*AuthClientMockUpdatePasswordExpectation

	callArgs []*AuthClientMockUpdatePasswordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockUpdatePasswordExpectation specifies expectation struct of the AuthClient.UpdatePassword
type AuthClientMockUpdatePasswordExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockUpdatePasswordParams
	paramPtrs          *AuthClientMockUpdatePasswordParamPtrs
	expectationOrigins AuthClientMockUpdatePasswordExpectationOrigins
	results            *AuthClientMockUpdatePasswordResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockUpdatePasswordParams contains parameters of the AuthClient.UpdatePassword
type AuthClientMockUpdatePasswordParams struct {
	ctx  context.Context
	in   *authService.UpdatePasswordRequest
	opts []grpc.CallOption
}

// AuthClientMockUpdatePasswordParamPtrs contains pointers to parameters of the AuthClient.UpdatePassword
type AuthClientMockUpdatePasswordParamPtrs struct {
	ctx  *context.Context
	in   **authService.UpdatePasswordRequest
	opts *[]grpc.CallOption
}

// AuthClientMockUpdatePasswordResults contains results of the AuthClient.UpdatePassword
type AuthClientMockUpdatePasswordResults struct {
	ep1 *emptypb.Empty
	err error
}

// AuthClientMockUpdatePasswordOrigins contains origins of expectations of the AuthClient.UpdatePassword
type AuthClientMockUpdatePasswordExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Optional() *mAuthClientMockUpdatePassword {
	mmUpdatePassword.optional = true
	return mmUpdatePassword
}

// Expect sets up expected params for AuthClient.UpdatePassword
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Expect(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption) *mAuthClientMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &AuthClientMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by ExpectParams functions")
	}

	mmUpdatePassword.defaultExpectation.params = &AuthClientMockUpdatePasswordParams{ctx, in, opts}
	mmUpdatePassword.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdatePassword.expectations {
		if minimock.Equal(e.params, mmUpdatePassword.defaultExpectation.params) {
			mmUpdatePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdatePassword.defaultExpectation.params)
		}
	}

	return mmUpdatePassword
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.UpdatePassword
func (mmUpdatePassword *mAuthClientMockUpdatePassword) ExpectCtxParam1(ctx context.Context) *mAuthClientMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &AuthClientMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &AuthClientMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdatePassword.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// ExpectInParam2 sets up expected param in for AuthClient.UpdatePassword
func (mmUpdatePassword *mAuthClientMockUpdatePassword) ExpectInParam2(in *authService.UpdatePasswordRequest) *mAuthClientMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &AuthClientMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &AuthClientMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.in = &in
	mmUpdatePassword.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.UpdatePassword
func (mmUpdatePassword *mAuthClientMockUpdatePassword) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &AuthClientMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &AuthClientMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.opts = &opts
	mmUpdatePassword.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.UpdatePassword
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Inspect(f func(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption)) *mAuthClientMockUpdatePassword {
	if mmUpdatePassword.mock.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("Inspect function is already set for AuthClientMock.UpdatePassword")
	}

	mmUpdatePassword.mock.inspectFuncUpdatePassword = f

	return mmUpdatePassword
}

// Return sets up results that will be returned by AuthClient.UpdatePassword
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Return(ep1 *emptypb.Empty, err error) *AuthClientMock {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &AuthClientMockUpdatePasswordExpectation{mock: mmUpdatePassword.mock}
	}
	mmUpdatePassword.defaultExpectation.results = &AuthClientMockUpdatePasswordResults{ep1, err}
	mmUpdatePassword.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// Set uses given function f to mock the AuthClient.UpdatePassword method
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Set(f func(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *AuthClientMock {
	if mmUpdatePassword.defaultExpectation != nil {
		mmUpdatePassword.mock.t.Fatalf("Default expectation is already set for the AuthClient.UpdatePassword method")
	}

	if len(mmUpdatePassword.expectations) > 0 {
		mmUpdatePassword.mock.t.Fatalf("Some expectations are already set for the AuthClient.UpdatePassword method")
	}

	mmUpdatePassword.mock.funcUpdatePassword = f
	mmUpdatePassword.mock.funcUpdatePasswordOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// When sets expectation for the AuthClient.UpdatePassword which will trigger the result defined by the following
// Then helper
func (mmUpdatePassword *mAuthClientMockUpdatePassword) When(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption) *AuthClientMockUpdatePasswordExpectation {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("AuthClientMock.UpdatePassword mock is already set by Set")
	}

	expectation := &AuthClientMockUpdatePasswordExpectation{
		mock:               mmUpdatePassword.mock,
		params:             &AuthClientMockUpdatePasswordParams{ctx, in, opts},
		expectationOrigins: AuthClientMockUpdatePasswordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdatePassword.expectations = append(mmUpdatePassword.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.UpdatePassword return parameters for the expectation previously defined by the When method
func (e *AuthClientMockUpdatePasswordExpectation) Then(ep1 *emptypb.Empty, err error) *AuthClientMock {
	e.results = &AuthClientMockUpdatePasswordResults{ep1, err}
	return e.mock
}

// Times sets number of times AuthClient.UpdatePassword should be invoked
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Times(n uint64) *mAuthClientMockUpdatePassword {
	if n == 0 {
		mmUpdatePassword.mock.t.Fatalf("Times of AuthClientMock.UpdatePassword mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdatePassword.expectedInvocations, n)
	mmUpdatePassword.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword
}

func (mmUpdatePassword *mAuthClientMockUpdatePassword) invocationsDone() bool {
	if len(mmUpdatePassword.expectations) == 0 && mmUpdatePassword.defaultExpectation == nil && mmUpdatePassword.mock.funcUpdatePassword == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.mock.afterUpdatePasswordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdatePassword implements mm_auth_client.AuthClient
func (mmUpdatePassword *AuthClientMock) UpdatePassword(ctx context.Context, in *authService.UpdatePasswordRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmUpdatePassword.beforeUpdatePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdatePassword.afterUpdatePasswordCounter, 1)

	mmUpdatePassword.t.Helper()

	if mmUpdatePassword.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.inspectFuncUpdatePassword(ctx, in, opts...)
	}

	mm_params := AuthClientMockUpdatePasswordParams{ctx, in, opts}

	// Record call args
	mmUpdatePassword.UpdatePasswordMock.mutex.Lock()
	mmUpdatePassword.UpdatePasswordMock.callArgs = append(mmUpdatePassword.UpdatePasswordMock.callArgs, &mm_params)
	mmUpdatePassword.UpdatePasswordMock.mutex.Unlock()

	for _, e := range mmUpdatePassword.UpdatePasswordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmUpdatePassword.UpdatePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdatePassword.UpdatePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.params
		mm_want_ptrs := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockUpdatePasswordParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdatePassword.t.Errorf("AuthClientMock.UpdatePassword got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmUpdatePassword.t.Errorf("AuthClientMock.UpdatePassword got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmUpdatePassword.t.Errorf("AuthClientMock.UpdatePassword got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdatePassword.t.Errorf("AuthClientMock.UpdatePassword got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdatePassword.t.Fatal("No results are set for the AuthClientMock.UpdatePassword")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmUpdatePassword.funcUpdatePassword != nil {
		return mmUpdatePassword.funcUpdatePassword(ctx, in, opts...)
	}
	mmUpdatePassword.t.Fatalf("Unexpected call to AuthClientMock.UpdatePassword. %v %v %v", ctx, in, opts)
	return
}

// UpdatePasswordAfterCounter returns a count of finished AuthClientMock.UpdatePassword invocations
func (mmUpdatePassword *AuthClientMock) UpdatePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.afterUpdatePasswordCounter)
}

// UpdatePasswordBeforeCounter returns a count of AuthClientMock.UpdatePassword invocations
func (mmUpdatePassword *AuthClientMock) UpdatePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.beforeUpdatePasswordCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.UpdatePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdatePassword *mAuthClientMockUpdatePassword) Calls() []*AuthClientMockUpdatePasswordParams {
	mmUpdatePassword.mutex.RLock()

	argCopy := make([]*AuthClientMockUpdatePasswordParams, len(mmUpdatePassword.callArgs))
	copy(argCopy, mmUpdatePassword.callArgs)

	mmUpdatePassword.mutex.RUnlock()

	return argCopy
}

// MinimockUpdatePasswordDone returns true if the count of the UpdatePassword invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockUpdatePasswordDone() bool {
	if m.UpdatePasswordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdatePasswordMock.invocationsDone()
}

// MinimockUpdatePasswordInspect logs each unmet expectation
func (m *AuthClientMock) MinimockUpdatePasswordInspect() {
	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.UpdatePassword at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdatePasswordCounter := mm_atomic.LoadUint64(&m.afterUpdatePasswordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdatePasswordMock.defaultExpectation != nil && afterUpdatePasswordCounter < 1 {
		if m.UpdatePasswordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.UpdatePassword at\n%s", m.UpdatePasswordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.UpdatePassword at\n%s with params: %#v", m.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *m.UpdatePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdatePassword != nil && afterUpdatePasswordCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.UpdatePassword at\n%s", m.funcUpdatePasswordOrigin)
	}

	if !m.UpdatePasswordMock.invocationsDone() && afterUpdatePasswordCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.UpdatePassword at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdatePasswordMock.expectedInvocations), m.UpdatePasswordMock.expectedInvocationsOrigin, afterUpdatePasswordCounter)
	}
}

type mAuthClientMockValidateToken struct {
	optional           bool
	mock               *AuthClientMock
	defaultExpectation *AuthClientMockValidateTokenExpectation
	expectations       []*AuthClientMockValidateTokenExpectation

	callArgs []*AuthClientMockValidateTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthClientMockValidateTokenExpectation specifies expectation struct of the AuthClient.ValidateToken
type AuthClientMockValidateTokenExpectation struct {
	mock               *AuthClientMock
	params             *AuthClientMockValidateTokenParams
	paramPtrs          *AuthClientMockValidateTokenParamPtrs
	expectationOrigins AuthClientMockValidateTokenExpectationOrigins
	results            *AuthClientMockValidateTokenResults
	returnOrigin       string
	Counter            uint64
}

// AuthClientMockValidateTokenParams contains parameters of the AuthClient.ValidateToken
type AuthClientMockValidateTokenParams struct {
	ctx  context.Context
	in   *authService.ValidateTokenRequest
	opts []grpc.CallOption
}

// AuthClientMockValidateTokenParamPtrs contains pointers to parameters of the AuthClient.ValidateToken
type AuthClientMockValidateTokenParamPtrs struct {
	ctx  *context.Context
	in   **authService.ValidateTokenRequest
	opts *[]grpc.CallOption
}

// AuthClientMockValidateTokenResults contains results of the AuthClient.ValidateToken
type AuthClientMockValidateTokenResults struct {
	ep1 *emptypb.Empty
	err error
}

// AuthClientMockValidateTokenOrigins contains origins of expectations of the AuthClient.ValidateToken
type AuthClientMockValidateTokenExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateToken *mAuthClientMockValidateToken) Optional() *mAuthClientMockValidateToken {
	mmValidateToken.optional = true
	return mmValidateToken
}

// Expect sets up expected params for AuthClient.ValidateToken
func (mmValidateToken *mAuthClientMockValidateToken) Expect(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption) *mAuthClientMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &AuthClientMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.paramPtrs != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by ExpectParams functions")
	}

	mmValidateToken.defaultExpectation.params = &AuthClientMockValidateTokenParams{ctx, in, opts}
	mmValidateToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateToken.expectations {
		if minimock.Equal(e.params, mmValidateToken.defaultExpectation.params) {
			mmValidateToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateToken.defaultExpectation.params)
		}
	}

	return mmValidateToken
}

// ExpectCtxParam1 sets up expected param ctx for AuthClient.ValidateToken
func (mmValidateToken *mAuthClientMockValidateToken) ExpectCtxParam1(ctx context.Context) *mAuthClientMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &AuthClientMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &AuthClientMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmValidateToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmValidateToken
}

// ExpectInParam2 sets up expected param in for AuthClient.ValidateToken
func (mmValidateToken *mAuthClientMockValidateToken) ExpectInParam2(in *authService.ValidateTokenRequest) *mAuthClientMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &AuthClientMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &AuthClientMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.in = &in
	mmValidateToken.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmValidateToken
}

// ExpectOptsParam3 sets up expected param opts for AuthClient.ValidateToken
func (mmValidateToken *mAuthClientMockValidateToken) ExpectOptsParam3(opts ...grpc.CallOption) *mAuthClientMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &AuthClientMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &AuthClientMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.opts = &opts
	mmValidateToken.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmValidateToken
}

// Inspect accepts an inspector function that has same arguments as the AuthClient.ValidateToken
func (mmValidateToken *mAuthClientMockValidateToken) Inspect(f func(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption)) *mAuthClientMockValidateToken {
	if mmValidateToken.mock.inspectFuncValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("Inspect function is already set for AuthClientMock.ValidateToken")
	}

	mmValidateToken.mock.inspectFuncValidateToken = f

	return mmValidateToken
}

// Return sets up results that will be returned by AuthClient.ValidateToken
func (mmValidateToken *mAuthClientMockValidateToken) Return(ep1 *emptypb.Empty, err error) *AuthClientMock {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &AuthClientMockValidateTokenExpectation{mock: mmValidateToken.mock}
	}
	mmValidateToken.defaultExpectation.results = &AuthClientMockValidateTokenResults{ep1, err}
	mmValidateToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// Set uses given function f to mock the AuthClient.ValidateToken method
func (mmValidateToken *mAuthClientMockValidateToken) Set(f func(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *AuthClientMock {
	if mmValidateToken.defaultExpectation != nil {
		mmValidateToken.mock.t.Fatalf("Default expectation is already set for the AuthClient.ValidateToken method")
	}

	if len(mmValidateToken.expectations) > 0 {
		mmValidateToken.mock.t.Fatalf("Some expectations are already set for the AuthClient.ValidateToken method")
	}

	mmValidateToken.mock.funcValidateToken = f
	mmValidateToken.mock.funcValidateTokenOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// When sets expectation for the AuthClient.ValidateToken which will trigger the result defined by the following
// Then helper
func (mmValidateToken *mAuthClientMockValidateToken) When(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption) *AuthClientMockValidateTokenExpectation {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("AuthClientMock.ValidateToken mock is already set by Set")
	}

	expectation := &AuthClientMockValidateTokenExpectation{
		mock:               mmValidateToken.mock,
		params:             &AuthClientMockValidateTokenParams{ctx, in, opts},
		expectationOrigins: AuthClientMockValidateTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateToken.expectations = append(mmValidateToken.expectations, expectation)
	return expectation
}

// Then sets up AuthClient.ValidateToken return parameters for the expectation previously defined by the When method
func (e *AuthClientMockValidateTokenExpectation) Then(ep1 *emptypb.Empty, err error) *AuthClientMock {
	e.results = &AuthClientMockValidateTokenResults{ep1, err}
	return e.mock
}

// Times sets number of times AuthClient.ValidateToken should be invoked
func (mmValidateToken *mAuthClientMockValidateToken) Times(n uint64) *mAuthClientMockValidateToken {
	if n == 0 {
		mmValidateToken.mock.t.Fatalf("Times of AuthClientMock.ValidateToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateToken.expectedInvocations, n)
	mmValidateToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateToken
}

func (mmValidateToken *mAuthClientMockValidateToken) invocationsDone() bool {
	if len(mmValidateToken.expectations) == 0 && mmValidateToken.defaultExpectation == nil && mmValidateToken.mock.funcValidateToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateToken.mock.afterValidateTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateToken implements mm_auth_client.AuthClient
func (mmValidateToken *AuthClientMock) ValidateToken(ctx context.Context, in *authService.ValidateTokenRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmValidateToken.beforeValidateTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateToken.afterValidateTokenCounter, 1)

	mmValidateToken.t.Helper()

	if mmValidateToken.inspectFuncValidateToken != nil {
		mmValidateToken.inspectFuncValidateToken(ctx, in, opts...)
	}

	mm_params := AuthClientMockValidateTokenParams{ctx, in, opts}

	// Record call args
	mmValidateToken.ValidateTokenMock.mutex.Lock()
	mmValidateToken.ValidateTokenMock.callArgs = append(mmValidateToken.ValidateTokenMock.callArgs, &mm_params)
	mmValidateToken.ValidateTokenMock.mutex.Unlock()

	for _, e := range mmValidateToken.ValidateTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmValidateToken.ValidateTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateToken.ValidateTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateToken.ValidateTokenMock.defaultExpectation.params
		mm_want_ptrs := mmValidateToken.ValidateTokenMock.defaultExpectation.paramPtrs

		mm_got := AuthClientMockValidateTokenParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmValidateToken.t.Errorf("AuthClientMock.ValidateToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmValidateToken.t.Errorf("AuthClientMock.ValidateToken got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmValidateToken.t.Errorf("AuthClientMock.ValidateToken got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateToken.t.Errorf("AuthClientMock.ValidateToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateToken.ValidateTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateToken.t.Fatal("No results are set for the AuthClientMock.ValidateToken")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmValidateToken.funcValidateToken != nil {
		return mmValidateToken.funcValidateToken(ctx, in, opts...)
	}
	mmValidateToken.t.Fatalf("Unexpected call to AuthClientMock.ValidateToken. %v %v %v", ctx, in, opts)
	return
}

// ValidateTokenAfterCounter returns a count of finished AuthClientMock.ValidateToken invocations
func (mmValidateToken *AuthClientMock) ValidateTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.afterValidateTokenCounter)
}

// ValidateTokenBeforeCounter returns a count of AuthClientMock.ValidateToken invocations
func (mmValidateToken *AuthClientMock) ValidateTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.beforeValidateTokenCounter)
}

// Calls returns a list of arguments used in each call to AuthClientMock.ValidateToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateToken *mAuthClientMockValidateToken) Calls() []*AuthClientMockValidateTokenParams {
	mmValidateToken.mutex.RLock()

	argCopy := make([]*AuthClientMockValidateTokenParams, len(mmValidateToken.callArgs))
	copy(argCopy, mmValidateToken.callArgs)

	mmValidateToken.mutex.RUnlock()

	return argCopy
}

// MinimockValidateTokenDone returns true if the count of the ValidateToken invocations corresponds
// the number of defined expectations
func (m *AuthClientMock) MinimockValidateTokenDone() bool {
	if m.ValidateTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateTokenMock.invocationsDone()
}

// MinimockValidateTokenInspect logs each unmet expectation
func (m *AuthClientMock) MinimockValidateTokenInspect() {
	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthClientMock.ValidateToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateTokenCounter := mm_atomic.LoadUint64(&m.afterValidateTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateTokenMock.defaultExpectation != nil && afterValidateTokenCounter < 1 {
		if m.ValidateTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthClientMock.ValidateToken at\n%s", m.ValidateTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthClientMock.ValidateToken at\n%s with params: %#v", m.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *m.ValidateTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateToken != nil && afterValidateTokenCounter < 1 {
		m.t.Errorf("Expected call to AuthClientMock.ValidateToken at\n%s", m.funcValidateTokenOrigin)
	}

	if !m.ValidateTokenMock.invocationsDone() && afterValidateTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthClientMock.ValidateToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateTokenMock.expectedInvocations), m.ValidateTokenMock.expectedInvocationsOrigin, afterValidateTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetAccessTokenInspect()

			m.MinimockLoginInspect()

			m.MinimockRegistrationInspect()

			m.MinimockUpdatePasswordInspect()

			m.MinimockValidateTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAccessTokenDone() &&
		m.MinimockLoginDone() &&
		m.MinimockRegistrationDone() &&
		m.MinimockUpdatePasswordDone() &&
		m.MinimockValidateTokenDone()
}

// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/AwesomeXjs/registration-service-with-checking-mail/auth-service/internal/repository.IRepository -o i_repository_minimock.go -n IRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/AwesomeXjs/registration-service-with-checking-mail/auth-service/internal/model"
	"github.com/gojuno/minimock/v3"
)

// IRepositoryMock implements mm_repository.IRepository
type IRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcConfirmEmail          func(ctx context.Context, email string) (err error)
	funcConfirmEmailOrigin    string
	inspectFuncConfirmEmail   func(ctx context.Context, email string)
	afterConfirmEmailCounter  uint64
	beforeConfirmEmailCounter uint64
	ConfirmEmailMock          mIRepositoryMockConfirmEmail

	funcGetAccessToken          func(ctx context.Context, userID string) (ap1 *model.AccessTokenInfo, err error)
	funcGetAccessTokenOrigin    string
	inspectFuncGetAccessToken   func(ctx context.Context, userID string)
	afterGetAccessTokenCounter  uint64
	beforeGetAccessTokenCounter uint64
	GetAccessTokenMock          mIRepositoryMockGetAccessToken

	funcLogin          func(ctx context.Context, email string) (lp1 *model.LoginResponse, err error)
	funcLoginOrigin    string
	inspectFuncLogin   func(ctx context.Context, email string)
	afterLoginCounter  uint64
	beforeLoginCounter uint64
	LoginMock          mIRepositoryMockLogin

	funcRegistration          func(ctx context.Context, registrationRequest *model.InfoToDb) (s1 string, err error)
	funcRegistrationOrigin    string
	inspectFuncRegistration   func(ctx context.Context, registrationRequest *model.InfoToDb)
	afterRegistrationCounter  uint64
	beforeRegistrationCounter uint64
	RegistrationMock          mIRepositoryMockRegistration

	funcUpdatePassword          func(ctx context.Context, updatePassDb *model.UpdatePassDb) (err error)
	funcUpdatePasswordOrigin    string
	inspectFuncUpdatePassword   func(ctx context.Context, updatePassDb *model.UpdatePassDb)
	afterUpdatePasswordCounter  uint64
	beforeUpdatePasswordCounter uint64
	UpdatePasswordMock          mIRepositoryMockUpdatePassword
}

// NewIRepositoryMock returns a mock for mm_repository.IRepository
func NewIRepositoryMock(t minimock.Tester) *IRepositoryMock {
	m := &IRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConfirmEmailMock = mIRepositoryMockConfirmEmail{mock: m}
	m.ConfirmEmailMock.callArgs = []*IRepositoryMockConfirmEmailParams{}

	m.GetAccessTokenMock = mIRepositoryMockGetAccessToken{mock: m}
	m.GetAccessTokenMock.callArgs = []*IRepositoryMockGetAccessTokenParams{}

	m.LoginMock = mIRepositoryMockLogin{mock: m}
	m.LoginMock.callArgs = []*IRepositoryMockLoginParams{}

	m.RegistrationMock = mIRepositoryMockRegistration{mock: m}
	m.RegistrationMock.callArgs = []*IRepositoryMockRegistrationParams{}

	m.UpdatePasswordMock = mIRepositoryMockUpdatePassword{mock: m}
	m.UpdatePasswordMock.callArgs = []*IRepositoryMockUpdatePasswordParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIRepositoryMockConfirmEmail struct {
	optional           bool
	mock               *IRepositoryMock
	defaultExpectation *IRepositoryMockConfirmEmailExpectation
	expectations       []*IRepositoryMockConfirmEmailExpectation

	callArgs []*IRepositoryMockConfirmEmailParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IRepositoryMockConfirmEmailExpectation specifies expectation struct of the IRepository.ConfirmEmail
type IRepositoryMockConfirmEmailExpectation struct {
	mock               *IRepositoryMock
	params             *IRepositoryMockConfirmEmailParams
	paramPtrs          *IRepositoryMockConfirmEmailParamPtrs
	expectationOrigins IRepositoryMockConfirmEmailExpectationOrigins
	results            *IRepositoryMockConfirmEmailResults
	returnOrigin       string
	Counter            uint64
}

// IRepositoryMockConfirmEmailParams contains parameters of the IRepository.ConfirmEmail
type IRepositoryMockConfirmEmailParams struct {
	ctx   context.Context
	email string
}

// IRepositoryMockConfirmEmailParamPtrs contains pointers to parameters of the IRepository.ConfirmEmail
type IRepositoryMockConfirmEmailParamPtrs struct {
	ctx   *context.Context
	email *string
}

// IRepositoryMockConfirmEmailResults contains results of the IRepository.ConfirmEmail
type IRepositoryMockConfirmEmailResults struct {
	err error
}

// IRepositoryMockConfirmEmailOrigins contains origins of expectations of the IRepository.ConfirmEmail
type IRepositoryMockConfirmEmailExpectationOrigins struct {
	origin      string
	originCtx   string
	originEmail string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Optional() *mIRepositoryMockConfirmEmail {
	mmConfirmEmail.optional = true
	return mmConfirmEmail
}

// Expect sets up expected params for IRepository.ConfirmEmail
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Expect(ctx context.Context, email string) *mIRepositoryMockConfirmEmail {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IRepositoryMockConfirmEmailExpectation{}
	}

	if mmConfirmEmail.defaultExpectation.paramPtrs != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by ExpectParams functions")
	}

	mmConfirmEmail.defaultExpectation.params = &IRepositoryMockConfirmEmailParams{ctx, email}
	mmConfirmEmail.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmConfirmEmail.expectations {
		if minimock.Equal(e.params, mmConfirmEmail.defaultExpectation.params) {
			mmConfirmEmail.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfirmEmail.defaultExpectation.params)
		}
	}

	return mmConfirmEmail
}

// ExpectCtxParam1 sets up expected param ctx for IRepository.ConfirmEmail
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) ExpectCtxParam1(ctx context.Context) *mIRepositoryMockConfirmEmail {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IRepositoryMockConfirmEmailExpectation{}
	}

	if mmConfirmEmail.defaultExpectation.params != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Expect")
	}

	if mmConfirmEmail.defaultExpectation.paramPtrs == nil {
		mmConfirmEmail.defaultExpectation.paramPtrs = &IRepositoryMockConfirmEmailParamPtrs{}
	}
	mmConfirmEmail.defaultExpectation.paramPtrs.ctx = &ctx
	mmConfirmEmail.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmConfirmEmail
}

// ExpectEmailParam2 sets up expected param email for IRepository.ConfirmEmail
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) ExpectEmailParam2(email string) *mIRepositoryMockConfirmEmail {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IRepositoryMockConfirmEmailExpectation{}
	}

	if mmConfirmEmail.defaultExpectation.params != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Expect")
	}

	if mmConfirmEmail.defaultExpectation.paramPtrs == nil {
		mmConfirmEmail.defaultExpectation.paramPtrs = &IRepositoryMockConfirmEmailParamPtrs{}
	}
	mmConfirmEmail.defaultExpectation.paramPtrs.email = &email
	mmConfirmEmail.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmConfirmEmail
}

// Inspect accepts an inspector function that has same arguments as the IRepository.ConfirmEmail
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Inspect(f func(ctx context.Context, email string)) *mIRepositoryMockConfirmEmail {
	if mmConfirmEmail.mock.inspectFuncConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("Inspect function is already set for IRepositoryMock.ConfirmEmail")
	}

	mmConfirmEmail.mock.inspectFuncConfirmEmail = f

	return mmConfirmEmail
}

// Return sets up results that will be returned by IRepository.ConfirmEmail
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Return(err error) *IRepositoryMock {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IRepositoryMockConfirmEmailExpectation{mock: mmConfirmEmail.mock}
	}
	mmConfirmEmail.defaultExpectation.results = &IRepositoryMockConfirmEmailResults{err}
	mmConfirmEmail.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmConfirmEmail.mock
}

// Set uses given function f to mock the IRepository.ConfirmEmail method
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Set(f func(ctx context.Context, email string) (err error)) *IRepositoryMock {
	if mmConfirmEmail.defaultExpectation != nil {
		mmConfirmEmail.mock.t.Fatalf("Default expectation is already set for the IRepository.ConfirmEmail method")
	}

	if len(mmConfirmEmail.expectations) > 0 {
		mmConfirmEmail.mock.t.Fatalf("Some expectations are already set for the IRepository.ConfirmEmail method")
	}

	mmConfirmEmail.mock.funcConfirmEmail = f
	mmConfirmEmail.mock.funcConfirmEmailOrigin = minimock.CallerInfo(1)
	return mmConfirmEmail.mock
}

// When sets expectation for the IRepository.ConfirmEmail which will trigger the result defined by the following
// Then helper
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) When(ctx context.Context, email string) *IRepositoryMockConfirmEmailExpectation {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IRepositoryMock.ConfirmEmail mock is already set by Set")
	}

	expectation := &IRepositoryMockConfirmEmailExpectation{
		mock:               mmConfirmEmail.mock,
		params:             &IRepositoryMockConfirmEmailParams{ctx, email},
		expectationOrigins: IRepositoryMockConfirmEmailExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmConfirmEmail.expectations = append(mmConfirmEmail.expectations, expectation)
	return expectation
}

// Then sets up IRepository.ConfirmEmail return parameters for the expectation previously defined by the When method
func (e *IRepositoryMockConfirmEmailExpectation) Then(err error) *IRepositoryMock {
	e.results = &IRepositoryMockConfirmEmailResults{err}
	return e.mock
}

// Times sets number of times IRepository.ConfirmEmail should be invoked
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Times(n uint64) *mIRepositoryMockConfirmEmail {
	if n == 0 {
		mmConfirmEmail.mock.t.Fatalf("Times of IRepositoryMock.ConfirmEmail mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmConfirmEmail.expectedInvocations, n)
	mmConfirmEmail.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmConfirmEmail
}

func (mmConfirmEmail *mIRepositoryMockConfirmEmail) invocationsDone() bool {
	if len(mmConfirmEmail.expectations) == 0 && mmConfirmEmail.defaultExpectation == nil && mmConfirmEmail.mock.funcConfirmEmail == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmConfirmEmail.mock.afterConfirmEmailCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmConfirmEmail.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ConfirmEmail implements mm_repository.IRepository
func (mmConfirmEmail *IRepositoryMock) ConfirmEmail(ctx context.Context, email string) (err error) {
	mm_atomic.AddUint64(&mmConfirmEmail.beforeConfirmEmailCounter, 1)
	defer mm_atomic.AddUint64(&mmConfirmEmail.afterConfirmEmailCounter, 1)

	mmConfirmEmail.t.Helper()

	if mmConfirmEmail.inspectFuncConfirmEmail != nil {
		mmConfirmEmail.inspectFuncConfirmEmail(ctx, email)
	}

	mm_params := IRepositoryMockConfirmEmailParams{ctx, email}

	// Record call args
	mmConfirmEmail.ConfirmEmailMock.mutex.Lock()
	mmConfirmEmail.ConfirmEmailMock.callArgs = append(mmConfirmEmail.ConfirmEmailMock.callArgs, &mm_params)
	mmConfirmEmail.ConfirmEmailMock.mutex.Unlock()

	for _, e := range mmConfirmEmail.ConfirmEmailMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmConfirmEmail.ConfirmEmailMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfirmEmail.ConfirmEmailMock.defaultExpectation.Counter, 1)
		mm_want := mmConfirmEmail.ConfirmEmailMock.defaultExpectation.params
		mm_want_ptrs := mmConfirmEmail.ConfirmEmailMock.defaultExpectation.paramPtrs

		mm_got := IRepositoryMockConfirmEmailParams{ctx, email}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmConfirmEmail.t.Errorf("IRepositoryMock.ConfirmEmail got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmConfirmEmail.ConfirmEmailMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmConfirmEmail.t.Errorf("IRepositoryMock.ConfirmEmail got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmConfirmEmail.ConfirmEmailMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfirmEmail.t.Errorf("IRepositoryMock.ConfirmEmail got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmConfirmEmail.ConfirmEmailMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfirmEmail.ConfirmEmailMock.defaultExpectation.results
		if mm_results == nil {
			mmConfirmEmail.t.Fatal("No results are set for the IRepositoryMock.ConfirmEmail")
		}
		return (*mm_results).err
	}
	if mmConfirmEmail.funcConfirmEmail != nil {
		return mmConfirmEmail.funcConfirmEmail(ctx, email)
	}
	mmConfirmEmail.t.Fatalf("Unexpected call to IRepositoryMock.ConfirmEmail. %v %v", ctx, email)
	return
}

// ConfirmEmailAfterCounter returns a count of finished IRepositoryMock.ConfirmEmail invocations
func (mmConfirmEmail *IRepositoryMock) ConfirmEmailAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfirmEmail.afterConfirmEmailCounter)
}

// ConfirmEmailBeforeCounter returns a count of IRepositoryMock.ConfirmEmail invocations
func (mmConfirmEmail *IRepositoryMock) ConfirmEmailBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfirmEmail.beforeConfirmEmailCounter)
}

// Calls returns a list of arguments used in each call to IRepositoryMock.ConfirmEmail.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfirmEmail *mIRepositoryMockConfirmEmail) Calls() []*IRepositoryMockConfirmEmailParams {
	mmConfirmEmail.mutex.RLock()

	argCopy := make([]*IRepositoryMockConfirmEmailParams, len(mmConfirmEmail.callArgs))
	copy(argCopy, mmConfirmEmail.callArgs)

	mmConfirmEmail.mutex.RUnlock()

	return argCopy
}

// MinimockConfirmEmailDone returns true if the count of the ConfirmEmail invocations corresponds
// the number of defined expectations
func (m *IRepositoryMock) MinimockConfirmEmailDone() bool {
	if m.ConfirmEmailMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ConfirmEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ConfirmEmailMock.invocationsDone()
}

// MinimockConfirmEmailInspect logs each unmet expectation
func (m *IRepositoryMock) MinimockConfirmEmailInspect() {
	for _, e := range m.ConfirmEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IRepositoryMock.ConfirmEmail at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterConfirmEmailCounter := mm_atomic.LoadUint64(&m.afterConfirmEmailCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ConfirmEmailMock.defaultExpectation != nil && afterConfirmEmailCounter < 1 {
		if m.ConfirmEmailMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IRepositoryMock.ConfirmEmail at\n%s", m.ConfirmEmailMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IRepositoryMock.ConfirmEmail at\n%s with params: %#v", m.ConfirmEmailMock.defaultExpectation.expectationOrigins.origin, *m.ConfirmEmailMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfirmEmail != nil && afterConfirmEmailCounter < 1 {
		m.t.Errorf("Expected call to IRepositoryMock.ConfirmEmail at\n%s", m.funcConfirmEmailOrigin)
	}

	if !m.ConfirmEmailMock.invocationsDone() && afterConfirmEmailCounter > 0 {
		m.t.Errorf("Expected %d calls to IRepositoryMock.ConfirmEmail at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ConfirmEmailMock.expectedInvocations), m.ConfirmEmailMock.expectedInvocationsOrigin, afterConfirmEmailCounter)
	}
}

type mIRepositoryMockGetAccessToken struct {
	optional           bool
	mock               *IRepositoryMock
	defaultExpectation *IRepositoryMockGetAccessTokenExpectation
	expectations       []*IRepositoryMockGetAccessTokenExpectation

	callArgs []*IRepositoryMockGetAccessTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IRepositoryMockGetAccessTokenExpectation specifies expectation struct of the IRepository.GetAccessToken
type IRepositoryMockGetAccessTokenExpectation struct {
	mock               *IRepositoryMock
	params             *IRepositoryMockGetAccessTokenParams
	paramPtrs          *IRepositoryMockGetAccessTokenParamPtrs
	expectationOrigins IRepositoryMockGetAccessTokenExpectationOrigins
	results            *IRepositoryMockGetAccessTokenResults
	returnOrigin       string
	Counter            uint64
}

// IRepositoryMockGetAccessTokenParams contains parameters of the IRepository.GetAccessToken
type IRepositoryMockGetAccessTokenParams struct {
	ctx    context.Context
	userID string
}

// IRepositoryMockGetAccessTokenParamPtrs contains pointers to parameters of the IRepository.GetAccessToken
type IRepositoryMockGetAccessTokenParamPtrs struct {
	ctx    *context.Context
	userID *string
}

// IRepositoryMockGetAccessTokenResults contains results of the IRepository.GetAccessToken
type IRepositoryMockGetAccessTokenResults struct {
	ap1 *model.AccessTokenInfo
	err error
}

// IRepositoryMockGetAccessTokenOrigins contains origins of expectations of the IRepository.GetAccessToken
type IRepositoryMockGetAccessTokenExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Optional() *mIRepositoryMockGetAccessToken {
	mmGetAccessToken.optional = true
	return mmGetAccessToken
}

// Expect sets up expected params for IRepository.GetAccessToken
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Expect(ctx context.Context, userID string) *mIRepositoryMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IRepositoryMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by ExpectParams functions")
	}

	mmGetAccessToken.defaultExpectation.params = &IRepositoryMockGetAccessTokenParams{ctx, userID}
	mmGetAccessToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAccessToken.expectations {
		if minimock.Equal(e.params, mmGetAccessToken.defaultExpectation.params) {
			mmGetAccessToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAccessToken.defaultExpectation.params)
		}
	}

	return mmGetAccessToken
}

// ExpectCtxParam1 sets up expected param ctx for IRepository.GetAccessToken
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) ExpectCtxParam1(ctx context.Context) *mIRepositoryMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IRepositoryMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &IRepositoryMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAccessToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// ExpectUserIDParam2 sets up expected param userID for IRepository.GetAccessToken
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) ExpectUserIDParam2(userID string) *mIRepositoryMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IRepositoryMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &IRepositoryMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.userID = &userID
	mmGetAccessToken.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// Inspect accepts an inspector function that has same arguments as the IRepository.GetAccessToken
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Inspect(f func(ctx context.Context, userID string)) *mIRepositoryMockGetAccessToken {
	if mmGetAccessToken.mock.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("Inspect function is already set for IRepositoryMock.GetAccessToken")
	}

	mmGetAccessToken.mock.inspectFuncGetAccessToken = f

	return mmGetAccessToken
}

// Return sets up results that will be returned by IRepository.GetAccessToken
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Return(ap1 *model.AccessTokenInfo, err error) *IRepositoryMock {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IRepositoryMockGetAccessTokenExpectation{mock: mmGetAccessToken.mock}
	}
	mmGetAccessToken.defaultExpectation.results = &IRepositoryMockGetAccessTokenResults{ap1, err}
	mmGetAccessToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// Set uses given function f to mock the IRepository.GetAccessToken method
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Set(f func(ctx context.Context, userID string) (ap1 *model.AccessTokenInfo, err error)) *IRepositoryMock {
	if mmGetAccessToken.defaultExpectation != nil {
		mmGetAccessToken.mock.t.Fatalf("Default expectation is already set for the IRepository.GetAccessToken method")
	}

	if len(mmGetAccessToken.expectations) > 0 {
		mmGetAccessToken.mock.t.Fatalf("Some expectations are already set for the IRepository.GetAccessToken method")
	}

	mmGetAccessToken.mock.funcGetAccessToken = f
	mmGetAccessToken.mock.funcGetAccessTokenOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// When sets expectation for the IRepository.GetAccessToken which will trigger the result defined by the following
// Then helper
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) When(ctx context.Context, userID string) *IRepositoryMockGetAccessTokenExpectation {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IRepositoryMock.GetAccessToken mock is already set by Set")
	}

	expectation := &IRepositoryMockGetAccessTokenExpectation{
		mock:               mmGetAccessToken.mock,
		params:             &IRepositoryMockGetAccessTokenParams{ctx, userID},
		expectationOrigins: IRepositoryMockGetAccessTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAccessToken.expectations = append(mmGetAccessToken.expectations, expectation)
	return expectation
}

// Then sets up IRepository.GetAccessToken return parameters for the expectation previously defined by the When method
func (e *IRepositoryMockGetAccessTokenExpectation) Then(ap1 *model.AccessTokenInfo, err error) *IRepositoryMock {
	e.results = &IRepositoryMockGetAccessTokenResults{ap1, err}
	return e.mock
}

// Times sets number of times IRepository.GetAccessToken should be invoked
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Times(n uint64) *mIRepositoryMockGetAccessToken {
	if n == 0 {
		mmGetAccessToken.mock.t.Fatalf("Times of IRepositoryMock.GetAccessToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAccessToken.expectedInvocations, n)
	mmGetAccessToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken
}

func (mmGetAccessToken *mIRepositoryMockGetAccessToken) invocationsDone() bool {
	if len(mmGetAccessToken.expectations) == 0 && mmGetAccessToken.defaultExpectation == nil && mmGetAccessToken.mock.funcGetAccessToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.mock.afterGetAccessTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAccessToken implements mm_repository.IRepository
func (mmGetAccessToken *IRepositoryMock) GetAccessToken(ctx context.Context, userID string) (ap1 *model.AccessTokenInfo, err error) {
	mm_atomic.AddUint64(&mmGetAccessToken.beforeGetAccessTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessToken.afterGetAccessTokenCounter, 1)

	mmGetAccessToken.t.Helper()

	if mmGetAccessToken.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.inspectFuncGetAccessToken(ctx, userID)
	}

	mm_params := IRepositoryMockGetAccessTokenParams{ctx, userID}

	// Record call args
	mmGetAccessToken.GetAccessTokenMock.mutex.Lock()
	mmGetAccessToken.GetAccessTokenMock.callArgs = append(mmGetAccessToken.GetAccessTokenMock.callArgs, &mm_params)
	mmGetAccessToken.GetAccessTokenMock.mutex.Unlock()

	for _, e := range mmGetAccessToken.GetAccessTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmGetAccessToken.GetAccessTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessToken.GetAccessTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.params
		mm_want_ptrs := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.paramPtrs

		mm_got := IRepositoryMockGetAccessTokenParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAccessToken.t.Errorf("IRepositoryMock.GetAccessToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGetAccessToken.t.Errorf("IRepositoryMock.GetAccessToken got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAccessToken.t.Errorf("IRepositoryMock.GetAccessToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAccessToken.t.Fatal("No results are set for the IRepositoryMock.GetAccessToken")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmGetAccessToken.funcGetAccessToken != nil {
		return mmGetAccessToken.funcGetAccessToken(ctx, userID)
	}
	mmGetAccessToken.t.Fatalf("Unexpected call to IRepositoryMock.GetAccessToken. %v %v", ctx, userID)
	return
}

// GetAccessTokenAfterCounter returns a count of finished IRepositoryMock.GetAccessToken invocations
func (mmGetAccessToken *IRepositoryMock) GetAccessTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.afterGetAccessTokenCounter)
}

// GetAccessTokenBeforeCounter returns a count of IRepositoryMock.GetAccessToken invocations
func (mmGetAccessToken *IRepositoryMock) GetAccessTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.beforeGetAccessTokenCounter)
}

// Calls returns a list of arguments used in each call to IRepositoryMock.GetAccessToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAccessToken *mIRepositoryMockGetAccessToken) Calls() []*IRepositoryMockGetAccessTokenParams {
	mmGetAccessToken.mutex.RLock()

	argCopy := make([]*IRepositoryMockGetAccessTokenParams, len(mmGetAccessToken.callArgs))
	copy(argCopy, mmGetAccessToken.callArgs)

	mmGetAccessToken.mutex.RUnlock()

	return argCopy
}

// MinimockGetAccessTokenDone returns true if the count of the GetAccessToken invocations corresponds
// the number of defined expectations
func (m *IRepositoryMock) MinimockGetAccessTokenDone() bool {
	if m.GetAccessTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAccessTokenMock.invocationsDone()
}

// MinimockGetAccessTokenInspect logs each unmet expectation
func (m *IRepositoryMock) MinimockGetAccessTokenInspect() {
	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IRepositoryMock.GetAccessToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAccessTokenCounter := mm_atomic.LoadUint64(&m.afterGetAccessTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessTokenMock.defaultExpectation != nil && afterGetAccessTokenCounter < 1 {
		if m.GetAccessTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IRepositoryMock.GetAccessToken at\n%s", m.GetAccessTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IRepositoryMock.GetAccessToken at\n%s with params: %#v", m.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *m.GetAccessTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessToken != nil && afterGetAccessTokenCounter < 1 {
		m.t.Errorf("Expected call to IRepositoryMock.GetAccessToken at\n%s", m.funcGetAccessTokenOrigin)
	}

	if !m.GetAccessTokenMock.invocationsDone() && afterGetAccessTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to IRepositoryMock.GetAccessToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAccessTokenMock.expectedInvocations), m.GetAccessTokenMock.expectedInvocationsOrigin, afterGetAccessTokenCounter)
	}
}

type mIRepositoryMockLogin struct {
	optional           bool
	mock               *IRepositoryMock
	defaultExpectation *IRepositoryMockLoginExpectation
	expectations       []*IRepositoryMockLoginExpectation

	callArgs []*IRepositoryMockLoginParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IRepositoryMockLoginExpectation specifies expectation struct of the IRepository.Login
type IRepositoryMockLoginExpectation struct {
	mock               *IRepositoryMock
	params             *IRepositoryMockLoginParams
	paramPtrs          *IRepositoryMockLoginParamPtrs
	expectationOrigins IRepositoryMockLoginExpectationOrigins
	results            *IRepositoryMockLoginResults
	returnOrigin       string
	Counter            uint64
}

// IRepositoryMockLoginParams contains parameters of the IRepository.Login
type IRepositoryMockLoginParams struct {
	ctx   context.Context
	email string
}

// IRepositoryMockLoginParamPtrs contains pointers to parameters of the IRepository.Login
type IRepositoryMockLoginParamPtrs struct {
	ctx   *context.Context
	email *string
}

// IRepositoryMockLoginResults contains results of the IRepository.Login
type IRepositoryMockLoginResults struct {
	lp1 *model.LoginResponse
	err error
}

// IRepositoryMockLoginOrigins contains origins of expectations of the IRepository.Login
type IRepositoryMockLoginExpectationOrigins struct {
	origin      string
	originCtx   string
	originEmail string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogin *mIRepositoryMockLogin) Optional() *mIRepositoryMockLogin {
	mmLogin.optional = true
	return mmLogin
}

// Expect sets up expected params for IRepository.Login
func (mmLogin *mIRepositoryMockLogin) Expect(ctx context.Context, email string) *mIRepositoryMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IRepositoryMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.paramPtrs != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by ExpectParams functions")
	}

	mmLogin.defaultExpectation.params = &IRepositoryMockLoginParams{ctx, email}
	mmLogin.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogin.expectations {
		if minimock.Equal(e.params, mmLogin.defaultExpectation.params) {
			mmLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogin.defaultExpectation.params)
		}
	}

	return mmLogin
}

// ExpectCtxParam1 sets up expected param ctx for IRepository.Login
func (mmLogin *mIRepositoryMockLogin) ExpectCtxParam1(ctx context.Context) *mIRepositoryMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IRepositoryMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &IRepositoryMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.ctx = &ctx
	mmLogin.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectEmailParam2 sets up expected param email for IRepository.Login
func (mmLogin *mIRepositoryMockLogin) ExpectEmailParam2(email string) *mIRepositoryMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IRepositoryMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &IRepositoryMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.email = &email
	mmLogin.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmLogin
}

// Inspect accepts an inspector function that has same arguments as the IRepository.Login
func (mmLogin *mIRepositoryMockLogin) Inspect(f func(ctx context.Context, email string)) *mIRepositoryMockLogin {
	if mmLogin.mock.inspectFuncLogin != nil {
		mmLogin.mock.t.Fatalf("Inspect function is already set for IRepositoryMock.Login")
	}

	mmLogin.mock.inspectFuncLogin = f

	return mmLogin
}

// Return sets up results that will be returned by IRepository.Login
func (mmLogin *mIRepositoryMockLogin) Return(lp1 *model.LoginResponse, err error) *IRepositoryMock {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IRepositoryMockLoginExpectation{mock: mmLogin.mock}
	}
	mmLogin.defaultExpectation.results = &IRepositoryMockLoginResults{lp1, err}
	mmLogin.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// Set uses given function f to mock the IRepository.Login method
func (mmLogin *mIRepositoryMockLogin) Set(f func(ctx context.Context, email string) (lp1 *model.LoginResponse, err error)) *IRepositoryMock {
	if mmLogin.defaultExpectation != nil {
		mmLogin.mock.t.Fatalf("Default expectation is already set for the IRepository.Login method")
	}

	if len(mmLogin.expectations) > 0 {
		mmLogin.mock.t.Fatalf("Some expectations are already set for the IRepository.Login method")
	}

	mmLogin.mock.funcLogin = f
	mmLogin.mock.funcLoginOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// When sets expectation for the IRepository.Login which will trigger the result defined by the following
// Then helper
func (mmLogin *mIRepositoryMockLogin) When(ctx context.Context, email string) *IRepositoryMockLoginExpectation {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IRepositoryMock.Login mock is already set by Set")
	}

	expectation := &IRepositoryMockLoginExpectation{
		mock:               mmLogin.mock,
		params:             &IRepositoryMockLoginParams{ctx, email},
		expectationOrigins: IRepositoryMockLoginExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogin.expectations = append(mmLogin.expectations, expectation)
	return expectation
}

// Then sets up IRepository.Login return parameters for the expectation previously defined by the When method
func (e *IRepositoryMockLoginExpectation) Then(lp1 *model.LoginResponse, err error) *IRepositoryMock {
	e.results = &IRepositoryMockLoginResults{lp1, err}
	return e.mock
}

// Times sets number of times IRepository.Login should be invoked
func (mmLogin *mIRepositoryMockLogin) Times(n uint64) *mIRepositoryMockLogin {
	if n == 0 {
		mmLogin.mock.t.Fatalf("Times of IRepositoryMock.Login mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogin.expectedInvocations, n)
	mmLogin.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogin
}

func (mmLogin *mIRepositoryMockLogin) invocationsDone() bool {
	if len(mmLogin.expectations) == 0 && mmLogin.defaultExpectation == nil && mmLogin.mock.funcLogin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogin.mock.afterLoginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Login implements mm_repository.IRepository
func (mmLogin *IRepositoryMock) Login(ctx context.Context, email string) (lp1 *model.LoginResponse, err error) {
	mm_atomic.AddUint64(&mmLogin.beforeLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmLogin.afterLoginCounter, 1)

	mmLogin.t.Helper()

	if mmLogin.inspectFuncLogin != nil {
		mmLogin.inspectFuncLogin(ctx, email)
	}

	mm_params := IRepositoryMockLoginParams{ctx, email}

	// Record call args
	mmLogin.LoginMock.mutex.Lock()
	mmLogin.LoginMock.callArgs = append(mmLogin.LoginMock.callArgs, &mm_params)
	mmLogin.LoginMock.mutex.Unlock()

	for _, e := range mmLogin.LoginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmLogin.LoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogin.LoginMock.defaultExpectation.Counter, 1)
		mm_want := mmLogin.LoginMock.defaultExpectation.params
		mm_want_ptrs := mmLogin.LoginMock.defaultExpectation.paramPtrs

		mm_got := IRepositoryMockLoginParams{ctx, email}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLogin.t.Errorf("IRepositoryMock.Login got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmLogin.t.Errorf("IRepositoryMock.Login got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogin.t.Errorf("IRepositoryMock.Login got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogin.LoginMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogin.LoginMock.defaultExpectation.results
		if mm_results == nil {
			mmLogin.t.Fatal("No results are set for the IRepositoryMock.Login")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmLogin.funcLogin != nil {
		return mmLogin.funcLogin(ctx, email)
	}
	mmLogin.t.Fatalf("Unexpected call to IRepositoryMock.Login. %v %v", ctx, email)
	return
}

// LoginAfterCounter returns a count of finished IRepositoryMock.Login invocations
func (mmLogin *IRepositoryMock) LoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.afterLoginCounter)
}

// LoginBeforeCounter returns a count of IRepositoryMock.Login invocations
func (mmLogin *IRepositoryMock) LoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.beforeLoginCounter)
}

// Calls returns a list of arguments used in each call to IRepositoryMock.Login.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogin *mIRepositoryMockLogin) Calls() []*IRepositoryMockLoginParams {
	mmLogin.mutex.RLock()

	argCopy := make([]*IRepositoryMockLoginParams, len(mmLogin.callArgs))
	copy(argCopy, mmLogin.callArgs)

	mmLogin.mutex.RUnlock()

	return argCopy
}

// MinimockLoginDone returns true if the count of the Login invocations corresponds
// the number of defined expectations
func (m *IRepositoryMock) MinimockLoginDone() bool {
	if m.LoginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LoginMock.invocationsDone()
}

// MinimockLoginInspect logs each unmet expectation
func (m *IRepositoryMock) MinimockLoginInspect() {
	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IRepositoryMock.Login at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLoginCounter := mm_atomic.LoadUint64(&m.afterLoginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LoginMock.defaultExpectation != nil && afterLoginCounter < 1 {
		if m.LoginMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IRepositoryMock.Login at\n%s", m.LoginMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IRepositoryMock.Login at\n%s with params: %#v", m.LoginMock.defaultExpectation.expectationOrigins.origin, *m.LoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogin != nil && afterLoginCounter < 1 {
		m.t.Errorf("Expected call to IRepositoryMock.Login at\n%s", m.funcLoginOrigin)
	}

	if !m.LoginMock.invocationsDone() && afterLoginCounter > 0 {
		m.t.Errorf("Expected %d calls to IRepositoryMock.Login at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LoginMock.expectedInvocations), m.LoginMock.expectedInvocationsOrigin, afterLoginCounter)
	}
}

type mIRepositoryMockRegistration struct {
	optional           bool
	mock               *IRepositoryMock
	defaultExpectation *IRepositoryMockRegistrationExpectation
	expectations       []*IRepositoryMockRegistrationExpectation

	callArgs []*IRepositoryMockRegistrationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IRepositoryMockRegistrationExpectation specifies expectation struct of the IRepository.Registration
type IRepositoryMockRegistrationExpectation struct {
	mock               *IRepositoryMock
	params             *IRepositoryMockRegistrationParams
	paramPtrs          *IRepositoryMockRegistrationParamPtrs
	expectationOrigins IRepositoryMockRegistrationExpectationOrigins
	results            *IRepositoryMockRegistrationResults
	returnOrigin       string
	Counter            uint64
}

// IRepositoryMockRegistrationParams contains parameters of the IRepository.Registration
type IRepositoryMockRegistrationParams struct {
	ctx                 context.Context
	registrationRequest *model.InfoToDb
}

// IRepositoryMockRegistrationParamPtrs contains pointers to parameters of the IRepository.Registration
type IRepositoryMockRegistrationParamPtrs struct {
	ctx                 *context.Context
	registrationRequest **model.InfoToDb
}

// IRepositoryMockRegistrationResults contains results of the IRepository.Registration
type IRepositoryMockRegistrationResults struct {
	s1  string
	err error
}

// IRepositoryMockRegistrationOrigins contains origins of expectations of the IRepository.Registration
type IRepositoryMockRegistrationExpectationOrigins struct {
	origin                    string
	originCtx                 string
	originRegistrationRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRegistration *mIRepositoryMockRegistration) Optional() *mIRepositoryMockRegistration {
	mmRegistration.optional = true
	return mmRegistration
}

// Expect sets up expected params for IRepository.Registration
func (mmRegistration *mIRepositoryMockRegistration) Expect(ctx context.Context, registrationRequest *model.InfoToDb) *mIRepositoryMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IRepositoryMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.paramPtrs != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by ExpectParams functions")
	}

	mmRegistration.defaultExpectation.params = &IRepositoryMockRegistrationParams{ctx, registrationRequest}
	mmRegistration.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRegistration.expectations {
		if minimock.Equal(e.params, mmRegistration.defaultExpectation.params) {
			mmRegistration.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRegistration.defaultExpectation.params)
		}
	}

	return mmRegistration
}

// ExpectCtxParam1 sets up expected param ctx for IRepository.Registration
func (mmRegistration *mIRepositoryMockRegistration) ExpectCtxParam1(ctx context.Context) *mIRepositoryMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IRepositoryMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &IRepositoryMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.ctx = &ctx
	mmRegistration.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRegistration
}

// ExpectRegistrationRequestParam2 sets up expected param registrationRequest for IRepository.Registration
func (mmRegistration *mIRepositoryMockRegistration) ExpectRegistrationRequestParam2(registrationRequest *model.InfoToDb) *mIRepositoryMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IRepositoryMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &IRepositoryMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.registrationRequest = &registrationRequest
	mmRegistration.defaultExpectation.expectationOrigins.originRegistrationRequest = minimock.CallerInfo(1)

	return mmRegistration
}

// Inspect accepts an inspector function that has same arguments as the IRepository.Registration
func (mmRegistration *mIRepositoryMockRegistration) Inspect(f func(ctx context.Context, registrationRequest *model.InfoToDb)) *mIRepositoryMockRegistration {
	if mmRegistration.mock.inspectFuncRegistration != nil {
		mmRegistration.mock.t.Fatalf("Inspect function is already set for IRepositoryMock.Registration")
	}

	mmRegistration.mock.inspectFuncRegistration = f

	return mmRegistration
}

// Return sets up results that will be returned by IRepository.Registration
func (mmRegistration *mIRepositoryMockRegistration) Return(s1 string, err error) *IRepositoryMock {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IRepositoryMockRegistrationExpectation{mock: mmRegistration.mock}
	}
	mmRegistration.defaultExpectation.results = &IRepositoryMockRegistrationResults{s1, err}
	mmRegistration.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// Set uses given function f to mock the IRepository.Registration method
func (mmRegistration *mIRepositoryMockRegistration) Set(f func(ctx context.Context, registrationRequest *model.InfoToDb) (s1 string, err error)) *IRepositoryMock {
	if mmRegistration.defaultExpectation != nil {
		mmRegistration.mock.t.Fatalf("Default expectation is already set for the IRepository.Registration method")
	}

	if len(mmRegistration.expectations) > 0 {
		mmRegistration.mock.t.Fatalf("Some expectations are already set for the IRepository.Registration method")
	}

	mmRegistration.mock.funcRegistration = f
	mmRegistration.mock.funcRegistrationOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// When sets expectation for the IRepository.Registration which will trigger the result defined by the following
// Then helper
func (mmRegistration *mIRepositoryMockRegistration) When(ctx context.Context, registrationRequest *model.InfoToDb) *IRepositoryMockRegistrationExpectation {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IRepositoryMock.Registration mock is already set by Set")
	}

	expectation := &IRepositoryMockRegistrationExpectation{
		mock:               mmRegistration.mock,
		params:             &IRepositoryMockRegistrationParams{ctx, registrationRequest},
		expectationOrigins: IRepositoryMockRegistrationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRegistration.expectations = append(mmRegistration.expectations, expectation)
	return expectation
}

// Then sets up IRepository.Registration return parameters for the expectation previously defined by the When method
func (e *IRepositoryMockRegistrationExpectation) Then(s1 string, err error) *IRepositoryMock {
	e.results = &IRepositoryMockRegistrationResults{s1, err}
	return e.mock
}

// Times sets number of times IRepository.Registration should be invoked
func (mmRegistration *mIRepositoryMockRegistration) Times(n uint64) *mIRepositoryMockRegistration {
	if n == 0 {
		mmRegistration.mock.t.Fatalf("Times of IRepositoryMock.Registration mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRegistration.expectedInvocations, n)
	mmRegistration.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRegistration
}

func (mmRegistration *mIRepositoryMockRegistration) invocationsDone() bool {
	if len(mmRegistration.expectations) == 0 && mmRegistration.defaultExpectation == nil && mmRegistration.mock.funcRegistration == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRegistration.mock.afterRegistrationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRegistration.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Registration implements mm_repository.IRepository
func (mmRegistration *IRepositoryMock) Registration(ctx context.Context, registrationRequest *model.InfoToDb) (s1 string, err error) {
	mm_atomic.AddUint64(&mmRegistration.beforeRegistrationCounter, 1)
	defer mm_atomic.AddUint64(&mmRegistration.afterRegistrationCounter, 1)

	mmRegistration.t.Helper()

	if mmRegistration.inspectFuncRegistration != nil {
		mmRegistration.inspectFuncRegistration(ctx, registrationRequest)
	}

	mm_params := IRepositoryMockRegistrationParams{ctx, registrationRequest}

	// Record call args
	mmRegistration.RegistrationMock.mutex.Lock()
	mmRegistration.RegistrationMock.callArgs = append(mmRegistration.RegistrationMock.callArgs, &mm_params)
	mmRegistration.RegistrationMock.mutex.Unlock()

	for _, e := range mmRegistration.RegistrationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmRegistration.RegistrationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRegistration.RegistrationMock.defaultExpectation.Counter, 1)
		mm_want := mmRegistration.RegistrationMock.defaultExpectation.params
		mm_want_ptrs := mmRegistration.RegistrationMock.defaultExpectation.paramPtrs

		mm_got := IRepositoryMockRegistrationParams{ctx, registrationRequest}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRegistration.t.Errorf("IRepositoryMock.Registration got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.registrationRequest != nil && !minimock.Equal(*mm_want_ptrs.registrationRequest, mm_got.registrationRequest) {
				mmRegistration.t.Errorf("IRepositoryMock.Registration got unexpected parameter registrationRequest, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originRegistrationRequest, *mm_want_ptrs.registrationRequest, mm_got.registrationRequest, minimock.Diff(*mm_want_ptrs.registrationRequest, mm_got.registrationRequest))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRegistration.t.Errorf("IRepositoryMock.Registration got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRegistration.RegistrationMock.defaultExpectation.results
		if mm_results == nil {
			mmRegistration.t.Fatal("No results are set for the IRepositoryMock.Registration")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmRegistration.funcRegistration != nil {
		return mmRegistration.funcRegistration(ctx, registrationRequest)
	}
	mmRegistration.t.Fatalf("Unexpected call to IRepositoryMock.Registration. %v %v", ctx, registrationRequest)
	return
}

// RegistrationAfterCounter returns a count of finished IRepositoryMock.Registration invocations
func (mmRegistration *IRepositoryMock) RegistrationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.afterRegistrationCounter)
}

// RegistrationBeforeCounter returns a count of IRepositoryMock.Registration invocations
func (mmRegistration *IRepositoryMock) RegistrationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.beforeRegistrationCounter)
}

// Calls returns a list of arguments used in each call to IRepositoryMock.Registration.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRegistration *mIRepositoryMockRegistration) Calls() []*IRepositoryMockRegistrationParams {
	mmRegistration.mutex.RLock()

	argCopy := make([]*IRepositoryMockRegistrationParams, len(mmRegistration.callArgs))
	copy(argCopy, mmRegistration.callArgs)

	mmRegistration.mutex.RUnlock()

	return argCopy
}

// MinimockRegistrationDone returns true if the count of the Registration invocations corresponds
// the number of defined expectations
func (m *IRepositoryMock) MinimockRegistrationDone() bool {
	if m.RegistrationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RegistrationMock.invocationsDone()
}

// MinimockRegistrationInspect logs each unmet expectation
func (m *IRepositoryMock) MinimockRegistrationInspect() {
	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IRepositoryMock.Registration at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRegistrationCounter := mm_atomic.LoadUint64(&m.afterRegistrationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RegistrationMock.defaultExpectation != nil && afterRegistrationCounter < 1 {
		if m.RegistrationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IRepositoryMock.Registration at\n%s", m.RegistrationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IRepositoryMock.Registration at\n%s with params: %#v", m.RegistrationMock.defaultExpectation.expectationOrigins.origin, *m.RegistrationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegistration != nil && afterRegistrationCounter < 1 {
		m.t.Errorf("Expected call to IRepositoryMock.Registration at\n%s", m.funcRegistrationOrigin)
	}

	if !m.RegistrationMock.invocationsDone() && afterRegistrationCounter > 0 {
		m.t.Errorf("Expected %d calls to IRepositoryMock.Registration at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RegistrationMock.expectedInvocations), m.RegistrationMock.expectedInvocationsOrigin, afterRegistrationCounter)
	}
}

type mIRepositoryMockUpdatePassword struct {
	optional           bool
	mock               *IRepositoryMock
	defaultExpectation *IRepositoryMockUpdatePasswordExpectation
	expectations       []*IRepositoryMockUpdatePasswordExpectation

	callArgs []*IRepositoryMockUpdatePasswordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IRepositoryMockUpdatePasswordExpectation specifies expectation struct of the IRepository.UpdatePassword
type IRepositoryMockUpdatePasswordExpectation struct {
	mock               *IRepositoryMock
	params             *IRepositoryMockUpdatePasswordParams
	paramPtrs          *IRepositoryMockUpdatePasswordParamPtrs
	expectationOrigins IRepositoryMockUpdatePasswordExpectationOrigins
	results            *IRepositoryMockUpdatePasswordResults
	returnOrigin       string
	Counter            uint64
}

// IRepositoryMockUpdatePasswordParams contains parameters of the IRepository.UpdatePassword
type IRepositoryMockUpdatePasswordParams struct {
	ctx          context.Context
	updatePassDb *model.UpdatePassDb
}

// IRepositoryMockUpdatePasswordParamPtrs contains pointers to parameters of the IRepository.UpdatePassword
type IRepositoryMockUpdatePasswordParamPtrs struct {
	ctx          *context.Context
	updatePassDb **model.UpdatePassDb
}

// IRepositoryMockUpdatePasswordResults contains results of the IRepository.UpdatePassword
type IRepositoryMockUpdatePasswordResults struct {
	err error
}

// IRepositoryMockUpdatePasswordOrigins contains origins of expectations of the IRepository.UpdatePassword
type IRepositoryMockUpdatePasswordExpectationOrigins struct {
	origin             string
	originCtx          string
	originUpdatePassDb string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Optional() *mIRepositoryMockUpdatePassword {
	mmUpdatePassword.optional = true
	return mmUpdatePassword
}

// Expect sets up expected params for IRepository.UpdatePassword
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Expect(ctx context.Context, updatePassDb *model.UpdatePassDb) *mIRepositoryMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IRepositoryMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by ExpectParams functions")
	}

	mmUpdatePassword.defaultExpectation.params = &IRepositoryMockUpdatePasswordParams{ctx, updatePassDb}
	mmUpdatePassword.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdatePassword.expectations {
		if minimock.Equal(e.params, mmUpdatePassword.defaultExpectation.params) {
			mmUpdatePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdatePassword.defaultExpectation.params)
		}
	}

	return mmUpdatePassword
}

// ExpectCtxParam1 sets up expected param ctx for IRepository.UpdatePassword
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) ExpectCtxParam1(ctx context.Context) *mIRepositoryMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IRepositoryMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &IRepositoryMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdatePassword.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// ExpectUpdatePassDbParam2 sets up expected param updatePassDb for IRepository.UpdatePassword
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) ExpectUpdatePassDbParam2(updatePassDb *model.UpdatePassDb) *mIRepositoryMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IRepositoryMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &IRepositoryMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.updatePassDb = &updatePassDb
	mmUpdatePassword.defaultExpectation.expectationOrigins.originUpdatePassDb = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// Inspect accepts an inspector function that has same arguments as the IRepository.UpdatePassword
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Inspect(f func(ctx context.Context, updatePassDb *model.UpdatePassDb)) *mIRepositoryMockUpdatePassword {
	if mmUpdatePassword.mock.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("Inspect function is already set for IRepositoryMock.UpdatePassword")
	}

	mmUpdatePassword.mock.inspectFuncUpdatePassword = f

	return mmUpdatePassword
}

// Return sets up results that will be returned by IRepository.UpdatePassword
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Return(err error) *IRepositoryMock {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IRepositoryMockUpdatePasswordExpectation{mock: mmUpdatePassword.mock}
	}
	mmUpdatePassword.defaultExpectation.results = &IRepositoryMockUpdatePasswordResults{err}
	mmUpdatePassword.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// Set uses given function f to mock the IRepository.UpdatePassword method
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Set(f func(ctx context.Context, updatePassDb *model.UpdatePassDb) (err error)) *IRepositoryMock {
	if mmUpdatePassword.defaultExpectation != nil {
		mmUpdatePassword.mock.t.Fatalf("Default expectation is already set for the IRepository.UpdatePassword method")
	}

	if len(mmUpdatePassword.expectations) > 0 {
		mmUpdatePassword.mock.t.Fatalf("Some expectations are already set for the IRepository.UpdatePassword method")
	}

	mmUpdatePassword.mock.funcUpdatePassword = f
	mmUpdatePassword.mock.funcUpdatePasswordOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// When sets expectation for the IRepository.UpdatePassword which will trigger the result defined by the following
// Then helper
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) When(ctx context.Context, updatePassDb *model.UpdatePassDb) *IRepositoryMockUpdatePasswordExpectation {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IRepositoryMock.UpdatePassword mock is already set by Set")
	}

	expectation := &IRepositoryMockUpdatePasswordExpectation{
		mock:               mmUpdatePassword.mock,
		params:             &IRepositoryMockUpdatePasswordParams{ctx, updatePassDb},
		expectationOrigins: IRepositoryMockUpdatePasswordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdatePassword.expectations = append(mmUpdatePassword.expectations, expectation)
	return expectation
}

// Then sets up IRepository.UpdatePassword return parameters for the expectation previously defined by the When method
func (e *IRepositoryMockUpdatePasswordExpectation) Then(err error) *IRepositoryMock {
	e.results = &IRepositoryMockUpdatePasswordResults{err}
	return e.mock
}

// Times sets number of times IRepository.UpdatePassword should be invoked
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Times(n uint64) *mIRepositoryMockUpdatePassword {
	if n == 0 {
		mmUpdatePassword.mock.t.Fatalf("Times of IRepositoryMock.UpdatePassword mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdatePassword.expectedInvocations, n)
	mmUpdatePassword.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword
}

func (mmUpdatePassword *mIRepositoryMockUpdatePassword) invocationsDone() bool {
	if len(mmUpdatePassword.expectations) == 0 && mmUpdatePassword.defaultExpectation == nil && mmUpdatePassword.mock.funcUpdatePassword == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.mock.afterUpdatePasswordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdatePassword implements mm_repository.IRepository
func (mmUpdatePassword *IRepositoryMock) UpdatePassword(ctx context.Context, updatePassDb *model.UpdatePassDb) (err error) {
	mm_atomic.AddUint64(&mmUpdatePassword.beforeUpdatePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdatePassword.afterUpdatePasswordCounter, 1)

	mmUpdatePassword.t.Helper()

	if mmUpdatePassword.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.inspectFuncUpdatePassword(ctx, updatePassDb)
	}

	mm_params := IRepositoryMockUpdatePasswordParams{ctx, updatePassDb}

	// Record call args
	mmUpdatePassword.UpdatePasswordMock.mutex.Lock()
	mmUpdatePassword.UpdatePasswordMock.callArgs = append(mmUpdatePassword.UpdatePasswordMock.callArgs, &mm_params)
	mmUpdatePassword.UpdatePasswordMock.mutex.Unlock()

	for _, e := range mmUpdatePassword.UpdatePasswordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdatePassword.UpdatePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdatePassword.UpdatePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.params
		mm_want_ptrs := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.paramPtrs

		mm_got := IRepositoryMockUpdatePasswordParams{ctx, updatePassDb}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdatePassword.t.Errorf("IRepositoryMock.UpdatePassword got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.updatePassDb != nil && !minimock.Equal(*mm_want_ptrs.updatePassDb, mm_got.updatePassDb) {
				mmUpdatePassword.t.Errorf("IRepositoryMock.UpdatePassword got unexpected parameter updatePassDb, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originUpdatePassDb, *mm_want_ptrs.updatePassDb, mm_got.updatePassDb, minimock.Diff(*mm_want_ptrs.updatePassDb, mm_got.updatePassDb))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdatePassword.t.Errorf("IRepositoryMock.UpdatePassword got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdatePassword.t.Fatal("No results are set for the IRepositoryMock.UpdatePassword")
		}
		return (*mm_results).err
	}
	if mmUpdatePassword.funcUpdatePassword != nil {
		return mmUpdatePassword.funcUpdatePassword(ctx, updatePassDb)
	}
	mmUpdatePassword.t.Fatalf("Unexpected call to IRepositoryMock.UpdatePassword. %v %v", ctx, updatePassDb)
	return
}

// UpdatePasswordAfterCounter returns a count of finished IRepositoryMock.UpdatePassword invocations
func (mmUpdatePassword *IRepositoryMock) UpdatePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.afterUpdatePasswordCounter)
}

// UpdatePasswordBeforeCounter returns a count of IRepositoryMock.UpdatePassword invocations
func (mmUpdatePassword *IRepositoryMock) UpdatePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.beforeUpdatePasswordCounter)
}

// Calls returns a list of arguments used in each call to IRepositoryMock.UpdatePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdatePassword *mIRepositoryMockUpdatePassword) Calls() []*IRepositoryMockUpdatePasswordParams {
	mmUpdatePassword.mutex.RLock()

	argCopy := make([]*IRepositoryMockUpdatePasswordParams, len(mmUpdatePassword.callArgs))
	copy(argCopy, mmUpdatePassword.callArgs)

	mmUpdatePassword.mutex.RUnlock()

	return argCopy
}

// MinimockUpdatePasswordDone returns true if the count of the UpdatePassword invocations corresponds
// the number of defined expectations
func (m *IRepositoryMock) MinimockUpdatePasswordDone() bool {
	if m.UpdatePasswordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdatePasswordMock.invocationsDone()
}

// MinimockUpdatePasswordInspect logs each unmet expectation
func (m *IRepositoryMock) MinimockUpdatePasswordInspect() {
	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IRepositoryMock.UpdatePassword at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdatePasswordCounter := mm_atomic.LoadUint64(&m.afterUpdatePasswordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdatePasswordMock.defaultExpectation != nil && afterUpdatePasswordCounter < 1 {
		if m.UpdatePasswordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IRepositoryMock.UpdatePassword at\n%s", m.UpdatePasswordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IRepositoryMock.UpdatePassword at\n%s with params: %#v", m.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *m.UpdatePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdatePassword != nil && afterUpdatePasswordCounter < 1 {
		m.t.Errorf("Expected call to IRepositoryMock.UpdatePassword at\n%s", m.funcUpdatePasswordOrigin)
	}

	if !m.UpdatePasswordMock.invocationsDone() && afterUpdatePasswordCounter > 0 {
		m.t.Errorf("Expected %d calls to IRepositoryMock.UpdatePassword at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdatePasswordMock.expectedInvocations), m.UpdatePasswordMock.expectedInvocationsOrigin, afterUpdatePasswordCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockConfirmEmailInspect()

			m.MinimockGetAccessTokenInspect()

			m.MinimockLoginInspect()

			m.MinimockRegistrationInspect()

			m.MinimockUpdatePasswordInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConfirmEmailDone() &&
		m.MinimockGetAccessTokenDone() &&
		m.MinimockLoginDone() &&
		m.MinimockRegistrationDone() &&
		m.MinimockUpdatePasswordDone()
}

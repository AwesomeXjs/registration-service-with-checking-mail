// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/AwesomeXjs/registration-service-with-checking-mail/auth-service/internal/service/auth.IServiceAuth -o i_service_auth_minimock.go -n IServiceAuthMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/AwesomeXjs/registration-service-with-checking-mail/auth-service/internal/model"
	"github.com/gojuno/minimock/v3"
)

// IServiceAuthMock implements mm_auth.IServiceAuth
type IServiceAuthMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcConfirmEmail          func(ctx context.Context, email string) (err error)
	funcConfirmEmailOrigin    string
	inspectFuncConfirmEmail   func(ctx context.Context, email string)
	afterConfirmEmailCounter  uint64
	beforeConfirmEmailCounter uint64
	ConfirmEmailMock          mIServiceAuthMockConfirmEmail

	funcGetAccessToken          func(ctx context.Context, refreshToken string) (np1 *model.NewPairTokens, err error)
	funcGetAccessTokenOrigin    string
	inspectFuncGetAccessToken   func(ctx context.Context, refreshToken string)
	afterGetAccessTokenCounter  uint64
	beforeGetAccessTokenCounter uint64
	GetAccessTokenMock          mIServiceAuthMockGetAccessToken

	funcLogin          func(ctx context.Context, loginRequest *model.LoginInfo) (ap1 *model.AuthResponse, err error)
	funcLoginOrigin    string
	inspectFuncLogin   func(ctx context.Context, loginRequest *model.LoginInfo)
	afterLoginCounter  uint64
	beforeLoginCounter uint64
	LoginMock          mIServiceAuthMockLogin

	funcRegistration          func(ctx context.Context, registrationRequest *model.UserInfo) (ap1 *model.AuthResponse, err error)
	funcRegistrationOrigin    string
	inspectFuncRegistration   func(ctx context.Context, registrationRequest *model.UserInfo)
	afterRegistrationCounter  uint64
	beforeRegistrationCounter uint64
	RegistrationMock          mIServiceAuthMockRegistration

	funcUpdatePassword          func(ctx context.Context, updatePassInfo *model.UpdatePassInfo) (err error)
	funcUpdatePasswordOrigin    string
	inspectFuncUpdatePassword   func(ctx context.Context, updatePassInfo *model.UpdatePassInfo)
	afterUpdatePasswordCounter  uint64
	beforeUpdatePasswordCounter uint64
	UpdatePasswordMock          mIServiceAuthMockUpdatePassword

	funcValidateToken          func(ctx context.Context, accessToken string) (b1 bool, err error)
	funcValidateTokenOrigin    string
	inspectFuncValidateToken   func(ctx context.Context, accessToken string)
	afterValidateTokenCounter  uint64
	beforeValidateTokenCounter uint64
	ValidateTokenMock          mIServiceAuthMockValidateToken
}

// NewIServiceAuthMock returns a mock for mm_auth.IServiceAuth
func NewIServiceAuthMock(t minimock.Tester) *IServiceAuthMock {
	m := &IServiceAuthMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConfirmEmailMock = mIServiceAuthMockConfirmEmail{mock: m}
	m.ConfirmEmailMock.callArgs = []*IServiceAuthMockConfirmEmailParams{}

	m.GetAccessTokenMock = mIServiceAuthMockGetAccessToken{mock: m}
	m.GetAccessTokenMock.callArgs = []*IServiceAuthMockGetAccessTokenParams{}

	m.LoginMock = mIServiceAuthMockLogin{mock: m}
	m.LoginMock.callArgs = []*IServiceAuthMockLoginParams{}

	m.RegistrationMock = mIServiceAuthMockRegistration{mock: m}
	m.RegistrationMock.callArgs = []*IServiceAuthMockRegistrationParams{}

	m.UpdatePasswordMock = mIServiceAuthMockUpdatePassword{mock: m}
	m.UpdatePasswordMock.callArgs = []*IServiceAuthMockUpdatePasswordParams{}

	m.ValidateTokenMock = mIServiceAuthMockValidateToken{mock: m}
	m.ValidateTokenMock.callArgs = []*IServiceAuthMockValidateTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIServiceAuthMockConfirmEmail struct {
	optional           bool
	mock               *IServiceAuthMock
	defaultExpectation *IServiceAuthMockConfirmEmailExpectation
	expectations       []*IServiceAuthMockConfirmEmailExpectation

	callArgs []*IServiceAuthMockConfirmEmailParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceAuthMockConfirmEmailExpectation specifies expectation struct of the IServiceAuth.ConfirmEmail
type IServiceAuthMockConfirmEmailExpectation struct {
	mock               *IServiceAuthMock
	params             *IServiceAuthMockConfirmEmailParams
	paramPtrs          *IServiceAuthMockConfirmEmailParamPtrs
	expectationOrigins IServiceAuthMockConfirmEmailExpectationOrigins
	results            *IServiceAuthMockConfirmEmailResults
	returnOrigin       string
	Counter            uint64
}

// IServiceAuthMockConfirmEmailParams contains parameters of the IServiceAuth.ConfirmEmail
type IServiceAuthMockConfirmEmailParams struct {
	ctx   context.Context
	email string
}

// IServiceAuthMockConfirmEmailParamPtrs contains pointers to parameters of the IServiceAuth.ConfirmEmail
type IServiceAuthMockConfirmEmailParamPtrs struct {
	ctx   *context.Context
	email *string
}

// IServiceAuthMockConfirmEmailResults contains results of the IServiceAuth.ConfirmEmail
type IServiceAuthMockConfirmEmailResults struct {
	err error
}

// IServiceAuthMockConfirmEmailOrigins contains origins of expectations of the IServiceAuth.ConfirmEmail
type IServiceAuthMockConfirmEmailExpectationOrigins struct {
	origin      string
	originCtx   string
	originEmail string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Optional() *mIServiceAuthMockConfirmEmail {
	mmConfirmEmail.optional = true
	return mmConfirmEmail
}

// Expect sets up expected params for IServiceAuth.ConfirmEmail
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Expect(ctx context.Context, email string) *mIServiceAuthMockConfirmEmail {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IServiceAuthMockConfirmEmailExpectation{}
	}

	if mmConfirmEmail.defaultExpectation.paramPtrs != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by ExpectParams functions")
	}

	mmConfirmEmail.defaultExpectation.params = &IServiceAuthMockConfirmEmailParams{ctx, email}
	mmConfirmEmail.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmConfirmEmail.expectations {
		if minimock.Equal(e.params, mmConfirmEmail.defaultExpectation.params) {
			mmConfirmEmail.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfirmEmail.defaultExpectation.params)
		}
	}

	return mmConfirmEmail
}

// ExpectCtxParam1 sets up expected param ctx for IServiceAuth.ConfirmEmail
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) ExpectCtxParam1(ctx context.Context) *mIServiceAuthMockConfirmEmail {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IServiceAuthMockConfirmEmailExpectation{}
	}

	if mmConfirmEmail.defaultExpectation.params != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Expect")
	}

	if mmConfirmEmail.defaultExpectation.paramPtrs == nil {
		mmConfirmEmail.defaultExpectation.paramPtrs = &IServiceAuthMockConfirmEmailParamPtrs{}
	}
	mmConfirmEmail.defaultExpectation.paramPtrs.ctx = &ctx
	mmConfirmEmail.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmConfirmEmail
}

// ExpectEmailParam2 sets up expected param email for IServiceAuth.ConfirmEmail
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) ExpectEmailParam2(email string) *mIServiceAuthMockConfirmEmail {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IServiceAuthMockConfirmEmailExpectation{}
	}

	if mmConfirmEmail.defaultExpectation.params != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Expect")
	}

	if mmConfirmEmail.defaultExpectation.paramPtrs == nil {
		mmConfirmEmail.defaultExpectation.paramPtrs = &IServiceAuthMockConfirmEmailParamPtrs{}
	}
	mmConfirmEmail.defaultExpectation.paramPtrs.email = &email
	mmConfirmEmail.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmConfirmEmail
}

// Inspect accepts an inspector function that has same arguments as the IServiceAuth.ConfirmEmail
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Inspect(f func(ctx context.Context, email string)) *mIServiceAuthMockConfirmEmail {
	if mmConfirmEmail.mock.inspectFuncConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("Inspect function is already set for IServiceAuthMock.ConfirmEmail")
	}

	mmConfirmEmail.mock.inspectFuncConfirmEmail = f

	return mmConfirmEmail
}

// Return sets up results that will be returned by IServiceAuth.ConfirmEmail
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Return(err error) *IServiceAuthMock {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Set")
	}

	if mmConfirmEmail.defaultExpectation == nil {
		mmConfirmEmail.defaultExpectation = &IServiceAuthMockConfirmEmailExpectation{mock: mmConfirmEmail.mock}
	}
	mmConfirmEmail.defaultExpectation.results = &IServiceAuthMockConfirmEmailResults{err}
	mmConfirmEmail.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmConfirmEmail.mock
}

// Set uses given function f to mock the IServiceAuth.ConfirmEmail method
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Set(f func(ctx context.Context, email string) (err error)) *IServiceAuthMock {
	if mmConfirmEmail.defaultExpectation != nil {
		mmConfirmEmail.mock.t.Fatalf("Default expectation is already set for the IServiceAuth.ConfirmEmail method")
	}

	if len(mmConfirmEmail.expectations) > 0 {
		mmConfirmEmail.mock.t.Fatalf("Some expectations are already set for the IServiceAuth.ConfirmEmail method")
	}

	mmConfirmEmail.mock.funcConfirmEmail = f
	mmConfirmEmail.mock.funcConfirmEmailOrigin = minimock.CallerInfo(1)
	return mmConfirmEmail.mock
}

// When sets expectation for the IServiceAuth.ConfirmEmail which will trigger the result defined by the following
// Then helper
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) When(ctx context.Context, email string) *IServiceAuthMockConfirmEmailExpectation {
	if mmConfirmEmail.mock.funcConfirmEmail != nil {
		mmConfirmEmail.mock.t.Fatalf("IServiceAuthMock.ConfirmEmail mock is already set by Set")
	}

	expectation := &IServiceAuthMockConfirmEmailExpectation{
		mock:               mmConfirmEmail.mock,
		params:             &IServiceAuthMockConfirmEmailParams{ctx, email},
		expectationOrigins: IServiceAuthMockConfirmEmailExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmConfirmEmail.expectations = append(mmConfirmEmail.expectations, expectation)
	return expectation
}

// Then sets up IServiceAuth.ConfirmEmail return parameters for the expectation previously defined by the When method
func (e *IServiceAuthMockConfirmEmailExpectation) Then(err error) *IServiceAuthMock {
	e.results = &IServiceAuthMockConfirmEmailResults{err}
	return e.mock
}

// Times sets number of times IServiceAuth.ConfirmEmail should be invoked
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Times(n uint64) *mIServiceAuthMockConfirmEmail {
	if n == 0 {
		mmConfirmEmail.mock.t.Fatalf("Times of IServiceAuthMock.ConfirmEmail mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmConfirmEmail.expectedInvocations, n)
	mmConfirmEmail.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmConfirmEmail
}

func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) invocationsDone() bool {
	if len(mmConfirmEmail.expectations) == 0 && mmConfirmEmail.defaultExpectation == nil && mmConfirmEmail.mock.funcConfirmEmail == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmConfirmEmail.mock.afterConfirmEmailCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmConfirmEmail.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ConfirmEmail implements mm_auth.IServiceAuth
func (mmConfirmEmail *IServiceAuthMock) ConfirmEmail(ctx context.Context, email string) (err error) {
	mm_atomic.AddUint64(&mmConfirmEmail.beforeConfirmEmailCounter, 1)
	defer mm_atomic.AddUint64(&mmConfirmEmail.afterConfirmEmailCounter, 1)

	mmConfirmEmail.t.Helper()

	if mmConfirmEmail.inspectFuncConfirmEmail != nil {
		mmConfirmEmail.inspectFuncConfirmEmail(ctx, email)
	}

	mm_params := IServiceAuthMockConfirmEmailParams{ctx, email}

	// Record call args
	mmConfirmEmail.ConfirmEmailMock.mutex.Lock()
	mmConfirmEmail.ConfirmEmailMock.callArgs = append(mmConfirmEmail.ConfirmEmailMock.callArgs, &mm_params)
	mmConfirmEmail.ConfirmEmailMock.mutex.Unlock()

	for _, e := range mmConfirmEmail.ConfirmEmailMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmConfirmEmail.ConfirmEmailMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfirmEmail.ConfirmEmailMock.defaultExpectation.Counter, 1)
		mm_want := mmConfirmEmail.ConfirmEmailMock.defaultExpectation.params
		mm_want_ptrs := mmConfirmEmail.ConfirmEmailMock.defaultExpectation.paramPtrs

		mm_got := IServiceAuthMockConfirmEmailParams{ctx, email}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmConfirmEmail.t.Errorf("IServiceAuthMock.ConfirmEmail got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmConfirmEmail.ConfirmEmailMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmConfirmEmail.t.Errorf("IServiceAuthMock.ConfirmEmail got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmConfirmEmail.ConfirmEmailMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfirmEmail.t.Errorf("IServiceAuthMock.ConfirmEmail got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmConfirmEmail.ConfirmEmailMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfirmEmail.ConfirmEmailMock.defaultExpectation.results
		if mm_results == nil {
			mmConfirmEmail.t.Fatal("No results are set for the IServiceAuthMock.ConfirmEmail")
		}
		return (*mm_results).err
	}
	if mmConfirmEmail.funcConfirmEmail != nil {
		return mmConfirmEmail.funcConfirmEmail(ctx, email)
	}
	mmConfirmEmail.t.Fatalf("Unexpected call to IServiceAuthMock.ConfirmEmail. %v %v", ctx, email)
	return
}

// ConfirmEmailAfterCounter returns a count of finished IServiceAuthMock.ConfirmEmail invocations
func (mmConfirmEmail *IServiceAuthMock) ConfirmEmailAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfirmEmail.afterConfirmEmailCounter)
}

// ConfirmEmailBeforeCounter returns a count of IServiceAuthMock.ConfirmEmail invocations
func (mmConfirmEmail *IServiceAuthMock) ConfirmEmailBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfirmEmail.beforeConfirmEmailCounter)
}

// Calls returns a list of arguments used in each call to IServiceAuthMock.ConfirmEmail.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfirmEmail *mIServiceAuthMockConfirmEmail) Calls() []*IServiceAuthMockConfirmEmailParams {
	mmConfirmEmail.mutex.RLock()

	argCopy := make([]*IServiceAuthMockConfirmEmailParams, len(mmConfirmEmail.callArgs))
	copy(argCopy, mmConfirmEmail.callArgs)

	mmConfirmEmail.mutex.RUnlock()

	return argCopy
}

// MinimockConfirmEmailDone returns true if the count of the ConfirmEmail invocations corresponds
// the number of defined expectations
func (m *IServiceAuthMock) MinimockConfirmEmailDone() bool {
	if m.ConfirmEmailMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ConfirmEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ConfirmEmailMock.invocationsDone()
}

// MinimockConfirmEmailInspect logs each unmet expectation
func (m *IServiceAuthMock) MinimockConfirmEmailInspect() {
	for _, e := range m.ConfirmEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceAuthMock.ConfirmEmail at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterConfirmEmailCounter := mm_atomic.LoadUint64(&m.afterConfirmEmailCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ConfirmEmailMock.defaultExpectation != nil && afterConfirmEmailCounter < 1 {
		if m.ConfirmEmailMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceAuthMock.ConfirmEmail at\n%s", m.ConfirmEmailMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceAuthMock.ConfirmEmail at\n%s with params: %#v", m.ConfirmEmailMock.defaultExpectation.expectationOrigins.origin, *m.ConfirmEmailMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfirmEmail != nil && afterConfirmEmailCounter < 1 {
		m.t.Errorf("Expected call to IServiceAuthMock.ConfirmEmail at\n%s", m.funcConfirmEmailOrigin)
	}

	if !m.ConfirmEmailMock.invocationsDone() && afterConfirmEmailCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceAuthMock.ConfirmEmail at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ConfirmEmailMock.expectedInvocations), m.ConfirmEmailMock.expectedInvocationsOrigin, afterConfirmEmailCounter)
	}
}

type mIServiceAuthMockGetAccessToken struct {
	optional           bool
	mock               *IServiceAuthMock
	defaultExpectation *IServiceAuthMockGetAccessTokenExpectation
	expectations       []*IServiceAuthMockGetAccessTokenExpectation

	callArgs []*IServiceAuthMockGetAccessTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceAuthMockGetAccessTokenExpectation specifies expectation struct of the IServiceAuth.GetAccessToken
type IServiceAuthMockGetAccessTokenExpectation struct {
	mock               *IServiceAuthMock
	params             *IServiceAuthMockGetAccessTokenParams
	paramPtrs          *IServiceAuthMockGetAccessTokenParamPtrs
	expectationOrigins IServiceAuthMockGetAccessTokenExpectationOrigins
	results            *IServiceAuthMockGetAccessTokenResults
	returnOrigin       string
	Counter            uint64
}

// IServiceAuthMockGetAccessTokenParams contains parameters of the IServiceAuth.GetAccessToken
type IServiceAuthMockGetAccessTokenParams struct {
	ctx          context.Context
	refreshToken string
}

// IServiceAuthMockGetAccessTokenParamPtrs contains pointers to parameters of the IServiceAuth.GetAccessToken
type IServiceAuthMockGetAccessTokenParamPtrs struct {
	ctx          *context.Context
	refreshToken *string
}

// IServiceAuthMockGetAccessTokenResults contains results of the IServiceAuth.GetAccessToken
type IServiceAuthMockGetAccessTokenResults struct {
	np1 *model.NewPairTokens
	err error
}

// IServiceAuthMockGetAccessTokenOrigins contains origins of expectations of the IServiceAuth.GetAccessToken
type IServiceAuthMockGetAccessTokenExpectationOrigins struct {
	origin             string
	originCtx          string
	originRefreshToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Optional() *mIServiceAuthMockGetAccessToken {
	mmGetAccessToken.optional = true
	return mmGetAccessToken
}

// Expect sets up expected params for IServiceAuth.GetAccessToken
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Expect(ctx context.Context, refreshToken string) *mIServiceAuthMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceAuthMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by ExpectParams functions")
	}

	mmGetAccessToken.defaultExpectation.params = &IServiceAuthMockGetAccessTokenParams{ctx, refreshToken}
	mmGetAccessToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAccessToken.expectations {
		if minimock.Equal(e.params, mmGetAccessToken.defaultExpectation.params) {
			mmGetAccessToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAccessToken.defaultExpectation.params)
		}
	}

	return mmGetAccessToken
}

// ExpectCtxParam1 sets up expected param ctx for IServiceAuth.GetAccessToken
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) ExpectCtxParam1(ctx context.Context) *mIServiceAuthMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceAuthMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &IServiceAuthMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAccessToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// ExpectRefreshTokenParam2 sets up expected param refreshToken for IServiceAuth.GetAccessToken
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) ExpectRefreshTokenParam2(refreshToken string) *mIServiceAuthMockGetAccessToken {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceAuthMockGetAccessTokenExpectation{}
	}

	if mmGetAccessToken.defaultExpectation.params != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Expect")
	}

	if mmGetAccessToken.defaultExpectation.paramPtrs == nil {
		mmGetAccessToken.defaultExpectation.paramPtrs = &IServiceAuthMockGetAccessTokenParamPtrs{}
	}
	mmGetAccessToken.defaultExpectation.paramPtrs.refreshToken = &refreshToken
	mmGetAccessToken.defaultExpectation.expectationOrigins.originRefreshToken = minimock.CallerInfo(1)

	return mmGetAccessToken
}

// Inspect accepts an inspector function that has same arguments as the IServiceAuth.GetAccessToken
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Inspect(f func(ctx context.Context, refreshToken string)) *mIServiceAuthMockGetAccessToken {
	if mmGetAccessToken.mock.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("Inspect function is already set for IServiceAuthMock.GetAccessToken")
	}

	mmGetAccessToken.mock.inspectFuncGetAccessToken = f

	return mmGetAccessToken
}

// Return sets up results that will be returned by IServiceAuth.GetAccessToken
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Return(np1 *model.NewPairTokens, err error) *IServiceAuthMock {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Set")
	}

	if mmGetAccessToken.defaultExpectation == nil {
		mmGetAccessToken.defaultExpectation = &IServiceAuthMockGetAccessTokenExpectation{mock: mmGetAccessToken.mock}
	}
	mmGetAccessToken.defaultExpectation.results = &IServiceAuthMockGetAccessTokenResults{np1, err}
	mmGetAccessToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// Set uses given function f to mock the IServiceAuth.GetAccessToken method
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Set(f func(ctx context.Context, refreshToken string) (np1 *model.NewPairTokens, err error)) *IServiceAuthMock {
	if mmGetAccessToken.defaultExpectation != nil {
		mmGetAccessToken.mock.t.Fatalf("Default expectation is already set for the IServiceAuth.GetAccessToken method")
	}

	if len(mmGetAccessToken.expectations) > 0 {
		mmGetAccessToken.mock.t.Fatalf("Some expectations are already set for the IServiceAuth.GetAccessToken method")
	}

	mmGetAccessToken.mock.funcGetAccessToken = f
	mmGetAccessToken.mock.funcGetAccessTokenOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken.mock
}

// When sets expectation for the IServiceAuth.GetAccessToken which will trigger the result defined by the following
// Then helper
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) When(ctx context.Context, refreshToken string) *IServiceAuthMockGetAccessTokenExpectation {
	if mmGetAccessToken.mock.funcGetAccessToken != nil {
		mmGetAccessToken.mock.t.Fatalf("IServiceAuthMock.GetAccessToken mock is already set by Set")
	}

	expectation := &IServiceAuthMockGetAccessTokenExpectation{
		mock:               mmGetAccessToken.mock,
		params:             &IServiceAuthMockGetAccessTokenParams{ctx, refreshToken},
		expectationOrigins: IServiceAuthMockGetAccessTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAccessToken.expectations = append(mmGetAccessToken.expectations, expectation)
	return expectation
}

// Then sets up IServiceAuth.GetAccessToken return parameters for the expectation previously defined by the When method
func (e *IServiceAuthMockGetAccessTokenExpectation) Then(np1 *model.NewPairTokens, err error) *IServiceAuthMock {
	e.results = &IServiceAuthMockGetAccessTokenResults{np1, err}
	return e.mock
}

// Times sets number of times IServiceAuth.GetAccessToken should be invoked
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Times(n uint64) *mIServiceAuthMockGetAccessToken {
	if n == 0 {
		mmGetAccessToken.mock.t.Fatalf("Times of IServiceAuthMock.GetAccessToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAccessToken.expectedInvocations, n)
	mmGetAccessToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAccessToken
}

func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) invocationsDone() bool {
	if len(mmGetAccessToken.expectations) == 0 && mmGetAccessToken.defaultExpectation == nil && mmGetAccessToken.mock.funcGetAccessToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.mock.afterGetAccessTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAccessToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAccessToken implements mm_auth.IServiceAuth
func (mmGetAccessToken *IServiceAuthMock) GetAccessToken(ctx context.Context, refreshToken string) (np1 *model.NewPairTokens, err error) {
	mm_atomic.AddUint64(&mmGetAccessToken.beforeGetAccessTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessToken.afterGetAccessTokenCounter, 1)

	mmGetAccessToken.t.Helper()

	if mmGetAccessToken.inspectFuncGetAccessToken != nil {
		mmGetAccessToken.inspectFuncGetAccessToken(ctx, refreshToken)
	}

	mm_params := IServiceAuthMockGetAccessTokenParams{ctx, refreshToken}

	// Record call args
	mmGetAccessToken.GetAccessTokenMock.mutex.Lock()
	mmGetAccessToken.GetAccessTokenMock.callArgs = append(mmGetAccessToken.GetAccessTokenMock.callArgs, &mm_params)
	mmGetAccessToken.GetAccessTokenMock.mutex.Unlock()

	for _, e := range mmGetAccessToken.GetAccessTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.np1, e.results.err
		}
	}

	if mmGetAccessToken.GetAccessTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessToken.GetAccessTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.params
		mm_want_ptrs := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.paramPtrs

		mm_got := IServiceAuthMockGetAccessTokenParams{ctx, refreshToken}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAccessToken.t.Errorf("IServiceAuthMock.GetAccessToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.refreshToken != nil && !minimock.Equal(*mm_want_ptrs.refreshToken, mm_got.refreshToken) {
				mmGetAccessToken.t.Errorf("IServiceAuthMock.GetAccessToken got unexpected parameter refreshToken, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.originRefreshToken, *mm_want_ptrs.refreshToken, mm_got.refreshToken, minimock.Diff(*mm_want_ptrs.refreshToken, mm_got.refreshToken))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAccessToken.t.Errorf("IServiceAuthMock.GetAccessToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAccessToken.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAccessToken.GetAccessTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAccessToken.t.Fatal("No results are set for the IServiceAuthMock.GetAccessToken")
		}
		return (*mm_results).np1, (*mm_results).err
	}
	if mmGetAccessToken.funcGetAccessToken != nil {
		return mmGetAccessToken.funcGetAccessToken(ctx, refreshToken)
	}
	mmGetAccessToken.t.Fatalf("Unexpected call to IServiceAuthMock.GetAccessToken. %v %v", ctx, refreshToken)
	return
}

// GetAccessTokenAfterCounter returns a count of finished IServiceAuthMock.GetAccessToken invocations
func (mmGetAccessToken *IServiceAuthMock) GetAccessTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.afterGetAccessTokenCounter)
}

// GetAccessTokenBeforeCounter returns a count of IServiceAuthMock.GetAccessToken invocations
func (mmGetAccessToken *IServiceAuthMock) GetAccessTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessToken.beforeGetAccessTokenCounter)
}

// Calls returns a list of arguments used in each call to IServiceAuthMock.GetAccessToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAccessToken *mIServiceAuthMockGetAccessToken) Calls() []*IServiceAuthMockGetAccessTokenParams {
	mmGetAccessToken.mutex.RLock()

	argCopy := make([]*IServiceAuthMockGetAccessTokenParams, len(mmGetAccessToken.callArgs))
	copy(argCopy, mmGetAccessToken.callArgs)

	mmGetAccessToken.mutex.RUnlock()

	return argCopy
}

// MinimockGetAccessTokenDone returns true if the count of the GetAccessToken invocations corresponds
// the number of defined expectations
func (m *IServiceAuthMock) MinimockGetAccessTokenDone() bool {
	if m.GetAccessTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAccessTokenMock.invocationsDone()
}

// MinimockGetAccessTokenInspect logs each unmet expectation
func (m *IServiceAuthMock) MinimockGetAccessTokenInspect() {
	for _, e := range m.GetAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceAuthMock.GetAccessToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAccessTokenCounter := mm_atomic.LoadUint64(&m.afterGetAccessTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessTokenMock.defaultExpectation != nil && afterGetAccessTokenCounter < 1 {
		if m.GetAccessTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceAuthMock.GetAccessToken at\n%s", m.GetAccessTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceAuthMock.GetAccessToken at\n%s with params: %#v", m.GetAccessTokenMock.defaultExpectation.expectationOrigins.origin, *m.GetAccessTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessToken != nil && afterGetAccessTokenCounter < 1 {
		m.t.Errorf("Expected call to IServiceAuthMock.GetAccessToken at\n%s", m.funcGetAccessTokenOrigin)
	}

	if !m.GetAccessTokenMock.invocationsDone() && afterGetAccessTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceAuthMock.GetAccessToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAccessTokenMock.expectedInvocations), m.GetAccessTokenMock.expectedInvocationsOrigin, afterGetAccessTokenCounter)
	}
}

type mIServiceAuthMockLogin struct {
	optional           bool
	mock               *IServiceAuthMock
	defaultExpectation *IServiceAuthMockLoginExpectation
	expectations       []*IServiceAuthMockLoginExpectation

	callArgs []*IServiceAuthMockLoginParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceAuthMockLoginExpectation specifies expectation struct of the IServiceAuth.Login
type IServiceAuthMockLoginExpectation struct {
	mock               *IServiceAuthMock
	params             *IServiceAuthMockLoginParams
	paramPtrs          *IServiceAuthMockLoginParamPtrs
	expectationOrigins IServiceAuthMockLoginExpectationOrigins
	results            *IServiceAuthMockLoginResults
	returnOrigin       string
	Counter            uint64
}

// IServiceAuthMockLoginParams contains parameters of the IServiceAuth.Login
type IServiceAuthMockLoginParams struct {
	ctx          context.Context
	loginRequest *model.LoginInfo
}

// IServiceAuthMockLoginParamPtrs contains pointers to parameters of the IServiceAuth.Login
type IServiceAuthMockLoginParamPtrs struct {
	ctx          *context.Context
	loginRequest **model.LoginInfo
}

// IServiceAuthMockLoginResults contains results of the IServiceAuth.Login
type IServiceAuthMockLoginResults struct {
	ap1 *model.AuthResponse
	err error
}

// IServiceAuthMockLoginOrigins contains origins of expectations of the IServiceAuth.Login
type IServiceAuthMockLoginExpectationOrigins struct {
	origin             string
	originCtx          string
	originLoginRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogin *mIServiceAuthMockLogin) Optional() *mIServiceAuthMockLogin {
	mmLogin.optional = true
	return mmLogin
}

// Expect sets up expected params for IServiceAuth.Login
func (mmLogin *mIServiceAuthMockLogin) Expect(ctx context.Context, loginRequest *model.LoginInfo) *mIServiceAuthMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceAuthMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.paramPtrs != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by ExpectParams functions")
	}

	mmLogin.defaultExpectation.params = &IServiceAuthMockLoginParams{ctx, loginRequest}
	mmLogin.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogin.expectations {
		if minimock.Equal(e.params, mmLogin.defaultExpectation.params) {
			mmLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogin.defaultExpectation.params)
		}
	}

	return mmLogin
}

// ExpectCtxParam1 sets up expected param ctx for IServiceAuth.Login
func (mmLogin *mIServiceAuthMockLogin) ExpectCtxParam1(ctx context.Context) *mIServiceAuthMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceAuthMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &IServiceAuthMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.ctx = &ctx
	mmLogin.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectLoginRequestParam2 sets up expected param loginRequest for IServiceAuth.Login
func (mmLogin *mIServiceAuthMockLogin) ExpectLoginRequestParam2(loginRequest *model.LoginInfo) *mIServiceAuthMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceAuthMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &IServiceAuthMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.loginRequest = &loginRequest
	mmLogin.defaultExpectation.expectationOrigins.originLoginRequest = minimock.CallerInfo(1)

	return mmLogin
}

// Inspect accepts an inspector function that has same arguments as the IServiceAuth.Login
func (mmLogin *mIServiceAuthMockLogin) Inspect(f func(ctx context.Context, loginRequest *model.LoginInfo)) *mIServiceAuthMockLogin {
	if mmLogin.mock.inspectFuncLogin != nil {
		mmLogin.mock.t.Fatalf("Inspect function is already set for IServiceAuthMock.Login")
	}

	mmLogin.mock.inspectFuncLogin = f

	return mmLogin
}

// Return sets up results that will be returned by IServiceAuth.Login
func (mmLogin *mIServiceAuthMockLogin) Return(ap1 *model.AuthResponse, err error) *IServiceAuthMock {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &IServiceAuthMockLoginExpectation{mock: mmLogin.mock}
	}
	mmLogin.defaultExpectation.results = &IServiceAuthMockLoginResults{ap1, err}
	mmLogin.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// Set uses given function f to mock the IServiceAuth.Login method
func (mmLogin *mIServiceAuthMockLogin) Set(f func(ctx context.Context, loginRequest *model.LoginInfo) (ap1 *model.AuthResponse, err error)) *IServiceAuthMock {
	if mmLogin.defaultExpectation != nil {
		mmLogin.mock.t.Fatalf("Default expectation is already set for the IServiceAuth.Login method")
	}

	if len(mmLogin.expectations) > 0 {
		mmLogin.mock.t.Fatalf("Some expectations are already set for the IServiceAuth.Login method")
	}

	mmLogin.mock.funcLogin = f
	mmLogin.mock.funcLoginOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// When sets expectation for the IServiceAuth.Login which will trigger the result defined by the following
// Then helper
func (mmLogin *mIServiceAuthMockLogin) When(ctx context.Context, loginRequest *model.LoginInfo) *IServiceAuthMockLoginExpectation {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("IServiceAuthMock.Login mock is already set by Set")
	}

	expectation := &IServiceAuthMockLoginExpectation{
		mock:               mmLogin.mock,
		params:             &IServiceAuthMockLoginParams{ctx, loginRequest},
		expectationOrigins: IServiceAuthMockLoginExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogin.expectations = append(mmLogin.expectations, expectation)
	return expectation
}

// Then sets up IServiceAuth.Login return parameters for the expectation previously defined by the When method
func (e *IServiceAuthMockLoginExpectation) Then(ap1 *model.AuthResponse, err error) *IServiceAuthMock {
	e.results = &IServiceAuthMockLoginResults{ap1, err}
	return e.mock
}

// Times sets number of times IServiceAuth.Login should be invoked
func (mmLogin *mIServiceAuthMockLogin) Times(n uint64) *mIServiceAuthMockLogin {
	if n == 0 {
		mmLogin.mock.t.Fatalf("Times of IServiceAuthMock.Login mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogin.expectedInvocations, n)
	mmLogin.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogin
}

func (mmLogin *mIServiceAuthMockLogin) invocationsDone() bool {
	if len(mmLogin.expectations) == 0 && mmLogin.defaultExpectation == nil && mmLogin.mock.funcLogin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogin.mock.afterLoginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Login implements mm_auth.IServiceAuth
func (mmLogin *IServiceAuthMock) Login(ctx context.Context, loginRequest *model.LoginInfo) (ap1 *model.AuthResponse, err error) {
	mm_atomic.AddUint64(&mmLogin.beforeLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmLogin.afterLoginCounter, 1)

	mmLogin.t.Helper()

	if mmLogin.inspectFuncLogin != nil {
		mmLogin.inspectFuncLogin(ctx, loginRequest)
	}

	mm_params := IServiceAuthMockLoginParams{ctx, loginRequest}

	// Record call args
	mmLogin.LoginMock.mutex.Lock()
	mmLogin.LoginMock.callArgs = append(mmLogin.LoginMock.callArgs, &mm_params)
	mmLogin.LoginMock.mutex.Unlock()

	for _, e := range mmLogin.LoginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmLogin.LoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogin.LoginMock.defaultExpectation.Counter, 1)
		mm_want := mmLogin.LoginMock.defaultExpectation.params
		mm_want_ptrs := mmLogin.LoginMock.defaultExpectation.paramPtrs

		mm_got := IServiceAuthMockLoginParams{ctx, loginRequest}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLogin.t.Errorf("IServiceAuthMock.Login got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.loginRequest != nil && !minimock.Equal(*mm_want_ptrs.loginRequest, mm_got.loginRequest) {
				mmLogin.t.Errorf("IServiceAuthMock.Login got unexpected parameter loginRequest, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originLoginRequest, *mm_want_ptrs.loginRequest, mm_got.loginRequest, minimock.Diff(*mm_want_ptrs.loginRequest, mm_got.loginRequest))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogin.t.Errorf("IServiceAuthMock.Login got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogin.LoginMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogin.LoginMock.defaultExpectation.results
		if mm_results == nil {
			mmLogin.t.Fatal("No results are set for the IServiceAuthMock.Login")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmLogin.funcLogin != nil {
		return mmLogin.funcLogin(ctx, loginRequest)
	}
	mmLogin.t.Fatalf("Unexpected call to IServiceAuthMock.Login. %v %v", ctx, loginRequest)
	return
}

// LoginAfterCounter returns a count of finished IServiceAuthMock.Login invocations
func (mmLogin *IServiceAuthMock) LoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.afterLoginCounter)
}

// LoginBeforeCounter returns a count of IServiceAuthMock.Login invocations
func (mmLogin *IServiceAuthMock) LoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.beforeLoginCounter)
}

// Calls returns a list of arguments used in each call to IServiceAuthMock.Login.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogin *mIServiceAuthMockLogin) Calls() []*IServiceAuthMockLoginParams {
	mmLogin.mutex.RLock()

	argCopy := make([]*IServiceAuthMockLoginParams, len(mmLogin.callArgs))
	copy(argCopy, mmLogin.callArgs)

	mmLogin.mutex.RUnlock()

	return argCopy
}

// MinimockLoginDone returns true if the count of the Login invocations corresponds
// the number of defined expectations
func (m *IServiceAuthMock) MinimockLoginDone() bool {
	if m.LoginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LoginMock.invocationsDone()
}

// MinimockLoginInspect logs each unmet expectation
func (m *IServiceAuthMock) MinimockLoginInspect() {
	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceAuthMock.Login at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLoginCounter := mm_atomic.LoadUint64(&m.afterLoginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LoginMock.defaultExpectation != nil && afterLoginCounter < 1 {
		if m.LoginMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceAuthMock.Login at\n%s", m.LoginMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceAuthMock.Login at\n%s with params: %#v", m.LoginMock.defaultExpectation.expectationOrigins.origin, *m.LoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogin != nil && afterLoginCounter < 1 {
		m.t.Errorf("Expected call to IServiceAuthMock.Login at\n%s", m.funcLoginOrigin)
	}

	if !m.LoginMock.invocationsDone() && afterLoginCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceAuthMock.Login at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LoginMock.expectedInvocations), m.LoginMock.expectedInvocationsOrigin, afterLoginCounter)
	}
}

type mIServiceAuthMockRegistration struct {
	optional           bool
	mock               *IServiceAuthMock
	defaultExpectation *IServiceAuthMockRegistrationExpectation
	expectations       []*IServiceAuthMockRegistrationExpectation

	callArgs []*IServiceAuthMockRegistrationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceAuthMockRegistrationExpectation specifies expectation struct of the IServiceAuth.Registration
type IServiceAuthMockRegistrationExpectation struct {
	mock               *IServiceAuthMock
	params             *IServiceAuthMockRegistrationParams
	paramPtrs          *IServiceAuthMockRegistrationParamPtrs
	expectationOrigins IServiceAuthMockRegistrationExpectationOrigins
	results            *IServiceAuthMockRegistrationResults
	returnOrigin       string
	Counter            uint64
}

// IServiceAuthMockRegistrationParams contains parameters of the IServiceAuth.Registration
type IServiceAuthMockRegistrationParams struct {
	ctx                 context.Context
	registrationRequest *model.UserInfo
}

// IServiceAuthMockRegistrationParamPtrs contains pointers to parameters of the IServiceAuth.Registration
type IServiceAuthMockRegistrationParamPtrs struct {
	ctx                 *context.Context
	registrationRequest **model.UserInfo
}

// IServiceAuthMockRegistrationResults contains results of the IServiceAuth.Registration
type IServiceAuthMockRegistrationResults struct {
	ap1 *model.AuthResponse
	err error
}

// IServiceAuthMockRegistrationOrigins contains origins of expectations of the IServiceAuth.Registration
type IServiceAuthMockRegistrationExpectationOrigins struct {
	origin                    string
	originCtx                 string
	originRegistrationRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRegistration *mIServiceAuthMockRegistration) Optional() *mIServiceAuthMockRegistration {
	mmRegistration.optional = true
	return mmRegistration
}

// Expect sets up expected params for IServiceAuth.Registration
func (mmRegistration *mIServiceAuthMockRegistration) Expect(ctx context.Context, registrationRequest *model.UserInfo) *mIServiceAuthMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceAuthMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.paramPtrs != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by ExpectParams functions")
	}

	mmRegistration.defaultExpectation.params = &IServiceAuthMockRegistrationParams{ctx, registrationRequest}
	mmRegistration.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRegistration.expectations {
		if minimock.Equal(e.params, mmRegistration.defaultExpectation.params) {
			mmRegistration.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRegistration.defaultExpectation.params)
		}
	}

	return mmRegistration
}

// ExpectCtxParam1 sets up expected param ctx for IServiceAuth.Registration
func (mmRegistration *mIServiceAuthMockRegistration) ExpectCtxParam1(ctx context.Context) *mIServiceAuthMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceAuthMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &IServiceAuthMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.ctx = &ctx
	mmRegistration.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRegistration
}

// ExpectRegistrationRequestParam2 sets up expected param registrationRequest for IServiceAuth.Registration
func (mmRegistration *mIServiceAuthMockRegistration) ExpectRegistrationRequestParam2(registrationRequest *model.UserInfo) *mIServiceAuthMockRegistration {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceAuthMockRegistrationExpectation{}
	}

	if mmRegistration.defaultExpectation.params != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Expect")
	}

	if mmRegistration.defaultExpectation.paramPtrs == nil {
		mmRegistration.defaultExpectation.paramPtrs = &IServiceAuthMockRegistrationParamPtrs{}
	}
	mmRegistration.defaultExpectation.paramPtrs.registrationRequest = &registrationRequest
	mmRegistration.defaultExpectation.expectationOrigins.originRegistrationRequest = minimock.CallerInfo(1)

	return mmRegistration
}

// Inspect accepts an inspector function that has same arguments as the IServiceAuth.Registration
func (mmRegistration *mIServiceAuthMockRegistration) Inspect(f func(ctx context.Context, registrationRequest *model.UserInfo)) *mIServiceAuthMockRegistration {
	if mmRegistration.mock.inspectFuncRegistration != nil {
		mmRegistration.mock.t.Fatalf("Inspect function is already set for IServiceAuthMock.Registration")
	}

	mmRegistration.mock.inspectFuncRegistration = f

	return mmRegistration
}

// Return sets up results that will be returned by IServiceAuth.Registration
func (mmRegistration *mIServiceAuthMockRegistration) Return(ap1 *model.AuthResponse, err error) *IServiceAuthMock {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Set")
	}

	if mmRegistration.defaultExpectation == nil {
		mmRegistration.defaultExpectation = &IServiceAuthMockRegistrationExpectation{mock: mmRegistration.mock}
	}
	mmRegistration.defaultExpectation.results = &IServiceAuthMockRegistrationResults{ap1, err}
	mmRegistration.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// Set uses given function f to mock the IServiceAuth.Registration method
func (mmRegistration *mIServiceAuthMockRegistration) Set(f func(ctx context.Context, registrationRequest *model.UserInfo) (ap1 *model.AuthResponse, err error)) *IServiceAuthMock {
	if mmRegistration.defaultExpectation != nil {
		mmRegistration.mock.t.Fatalf("Default expectation is already set for the IServiceAuth.Registration method")
	}

	if len(mmRegistration.expectations) > 0 {
		mmRegistration.mock.t.Fatalf("Some expectations are already set for the IServiceAuth.Registration method")
	}

	mmRegistration.mock.funcRegistration = f
	mmRegistration.mock.funcRegistrationOrigin = minimock.CallerInfo(1)
	return mmRegistration.mock
}

// When sets expectation for the IServiceAuth.Registration which will trigger the result defined by the following
// Then helper
func (mmRegistration *mIServiceAuthMockRegistration) When(ctx context.Context, registrationRequest *model.UserInfo) *IServiceAuthMockRegistrationExpectation {
	if mmRegistration.mock.funcRegistration != nil {
		mmRegistration.mock.t.Fatalf("IServiceAuthMock.Registration mock is already set by Set")
	}

	expectation := &IServiceAuthMockRegistrationExpectation{
		mock:               mmRegistration.mock,
		params:             &IServiceAuthMockRegistrationParams{ctx, registrationRequest},
		expectationOrigins: IServiceAuthMockRegistrationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRegistration.expectations = append(mmRegistration.expectations, expectation)
	return expectation
}

// Then sets up IServiceAuth.Registration return parameters for the expectation previously defined by the When method
func (e *IServiceAuthMockRegistrationExpectation) Then(ap1 *model.AuthResponse, err error) *IServiceAuthMock {
	e.results = &IServiceAuthMockRegistrationResults{ap1, err}
	return e.mock
}

// Times sets number of times IServiceAuth.Registration should be invoked
func (mmRegistration *mIServiceAuthMockRegistration) Times(n uint64) *mIServiceAuthMockRegistration {
	if n == 0 {
		mmRegistration.mock.t.Fatalf("Times of IServiceAuthMock.Registration mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRegistration.expectedInvocations, n)
	mmRegistration.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRegistration
}

func (mmRegistration *mIServiceAuthMockRegistration) invocationsDone() bool {
	if len(mmRegistration.expectations) == 0 && mmRegistration.defaultExpectation == nil && mmRegistration.mock.funcRegistration == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRegistration.mock.afterRegistrationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRegistration.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Registration implements mm_auth.IServiceAuth
func (mmRegistration *IServiceAuthMock) Registration(ctx context.Context, registrationRequest *model.UserInfo) (ap1 *model.AuthResponse, err error) {
	mm_atomic.AddUint64(&mmRegistration.beforeRegistrationCounter, 1)
	defer mm_atomic.AddUint64(&mmRegistration.afterRegistrationCounter, 1)

	mmRegistration.t.Helper()

	if mmRegistration.inspectFuncRegistration != nil {
		mmRegistration.inspectFuncRegistration(ctx, registrationRequest)
	}

	mm_params := IServiceAuthMockRegistrationParams{ctx, registrationRequest}

	// Record call args
	mmRegistration.RegistrationMock.mutex.Lock()
	mmRegistration.RegistrationMock.callArgs = append(mmRegistration.RegistrationMock.callArgs, &mm_params)
	mmRegistration.RegistrationMock.mutex.Unlock()

	for _, e := range mmRegistration.RegistrationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmRegistration.RegistrationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRegistration.RegistrationMock.defaultExpectation.Counter, 1)
		mm_want := mmRegistration.RegistrationMock.defaultExpectation.params
		mm_want_ptrs := mmRegistration.RegistrationMock.defaultExpectation.paramPtrs

		mm_got := IServiceAuthMockRegistrationParams{ctx, registrationRequest}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRegistration.t.Errorf("IServiceAuthMock.Registration got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.registrationRequest != nil && !minimock.Equal(*mm_want_ptrs.registrationRequest, mm_got.registrationRequest) {
				mmRegistration.t.Errorf("IServiceAuthMock.Registration got unexpected parameter registrationRequest, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.originRegistrationRequest, *mm_want_ptrs.registrationRequest, mm_got.registrationRequest, minimock.Diff(*mm_want_ptrs.registrationRequest, mm_got.registrationRequest))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRegistration.t.Errorf("IServiceAuthMock.Registration got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRegistration.RegistrationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRegistration.RegistrationMock.defaultExpectation.results
		if mm_results == nil {
			mmRegistration.t.Fatal("No results are set for the IServiceAuthMock.Registration")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmRegistration.funcRegistration != nil {
		return mmRegistration.funcRegistration(ctx, registrationRequest)
	}
	mmRegistration.t.Fatalf("Unexpected call to IServiceAuthMock.Registration. %v %v", ctx, registrationRequest)
	return
}

// RegistrationAfterCounter returns a count of finished IServiceAuthMock.Registration invocations
func (mmRegistration *IServiceAuthMock) RegistrationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.afterRegistrationCounter)
}

// RegistrationBeforeCounter returns a count of IServiceAuthMock.Registration invocations
func (mmRegistration *IServiceAuthMock) RegistrationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistration.beforeRegistrationCounter)
}

// Calls returns a list of arguments used in each call to IServiceAuthMock.Registration.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRegistration *mIServiceAuthMockRegistration) Calls() []*IServiceAuthMockRegistrationParams {
	mmRegistration.mutex.RLock()

	argCopy := make([]*IServiceAuthMockRegistrationParams, len(mmRegistration.callArgs))
	copy(argCopy, mmRegistration.callArgs)

	mmRegistration.mutex.RUnlock()

	return argCopy
}

// MinimockRegistrationDone returns true if the count of the Registration invocations corresponds
// the number of defined expectations
func (m *IServiceAuthMock) MinimockRegistrationDone() bool {
	if m.RegistrationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RegistrationMock.invocationsDone()
}

// MinimockRegistrationInspect logs each unmet expectation
func (m *IServiceAuthMock) MinimockRegistrationInspect() {
	for _, e := range m.RegistrationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceAuthMock.Registration at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRegistrationCounter := mm_atomic.LoadUint64(&m.afterRegistrationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RegistrationMock.defaultExpectation != nil && afterRegistrationCounter < 1 {
		if m.RegistrationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceAuthMock.Registration at\n%s", m.RegistrationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceAuthMock.Registration at\n%s with params: %#v", m.RegistrationMock.defaultExpectation.expectationOrigins.origin, *m.RegistrationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegistration != nil && afterRegistrationCounter < 1 {
		m.t.Errorf("Expected call to IServiceAuthMock.Registration at\n%s", m.funcRegistrationOrigin)
	}

	if !m.RegistrationMock.invocationsDone() && afterRegistrationCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceAuthMock.Registration at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RegistrationMock.expectedInvocations), m.RegistrationMock.expectedInvocationsOrigin, afterRegistrationCounter)
	}
}

type mIServiceAuthMockUpdatePassword struct {
	optional           bool
	mock               *IServiceAuthMock
	defaultExpectation *IServiceAuthMockUpdatePasswordExpectation
	expectations       []*IServiceAuthMockUpdatePasswordExpectation

	callArgs []*IServiceAuthMockUpdatePasswordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceAuthMockUpdatePasswordExpectation specifies expectation struct of the IServiceAuth.UpdatePassword
type IServiceAuthMockUpdatePasswordExpectation struct {
	mock               *IServiceAuthMock
	params             *IServiceAuthMockUpdatePasswordParams
	paramPtrs          *IServiceAuthMockUpdatePasswordParamPtrs
	expectationOrigins IServiceAuthMockUpdatePasswordExpectationOrigins
	results            *IServiceAuthMockUpdatePasswordResults
	returnOrigin       string
	Counter            uint64
}

// IServiceAuthMockUpdatePasswordParams contains parameters of the IServiceAuth.UpdatePassword
type IServiceAuthMockUpdatePasswordParams struct {
	ctx            context.Context
	updatePassInfo *model.UpdatePassInfo
}

// IServiceAuthMockUpdatePasswordParamPtrs contains pointers to parameters of the IServiceAuth.UpdatePassword
type IServiceAuthMockUpdatePasswordParamPtrs struct {
	ctx            *context.Context
	updatePassInfo **model.UpdatePassInfo
}

// IServiceAuthMockUpdatePasswordResults contains results of the IServiceAuth.UpdatePassword
type IServiceAuthMockUpdatePasswordResults struct {
	err error
}

// IServiceAuthMockUpdatePasswordOrigins contains origins of expectations of the IServiceAuth.UpdatePassword
type IServiceAuthMockUpdatePasswordExpectationOrigins struct {
	origin               string
	originCtx            string
	originUpdatePassInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Optional() *mIServiceAuthMockUpdatePassword {
	mmUpdatePassword.optional = true
	return mmUpdatePassword
}

// Expect sets up expected params for IServiceAuth.UpdatePassword
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Expect(ctx context.Context, updatePassInfo *model.UpdatePassInfo) *mIServiceAuthMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceAuthMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by ExpectParams functions")
	}

	mmUpdatePassword.defaultExpectation.params = &IServiceAuthMockUpdatePasswordParams{ctx, updatePassInfo}
	mmUpdatePassword.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdatePassword.expectations {
		if minimock.Equal(e.params, mmUpdatePassword.defaultExpectation.params) {
			mmUpdatePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdatePassword.defaultExpectation.params)
		}
	}

	return mmUpdatePassword
}

// ExpectCtxParam1 sets up expected param ctx for IServiceAuth.UpdatePassword
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) ExpectCtxParam1(ctx context.Context) *mIServiceAuthMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceAuthMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &IServiceAuthMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdatePassword.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// ExpectUpdatePassInfoParam2 sets up expected param updatePassInfo for IServiceAuth.UpdatePassword
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) ExpectUpdatePassInfoParam2(updatePassInfo *model.UpdatePassInfo) *mIServiceAuthMockUpdatePassword {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceAuthMockUpdatePasswordExpectation{}
	}

	if mmUpdatePassword.defaultExpectation.params != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Expect")
	}

	if mmUpdatePassword.defaultExpectation.paramPtrs == nil {
		mmUpdatePassword.defaultExpectation.paramPtrs = &IServiceAuthMockUpdatePasswordParamPtrs{}
	}
	mmUpdatePassword.defaultExpectation.paramPtrs.updatePassInfo = &updatePassInfo
	mmUpdatePassword.defaultExpectation.expectationOrigins.originUpdatePassInfo = minimock.CallerInfo(1)

	return mmUpdatePassword
}

// Inspect accepts an inspector function that has same arguments as the IServiceAuth.UpdatePassword
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Inspect(f func(ctx context.Context, updatePassInfo *model.UpdatePassInfo)) *mIServiceAuthMockUpdatePassword {
	if mmUpdatePassword.mock.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("Inspect function is already set for IServiceAuthMock.UpdatePassword")
	}

	mmUpdatePassword.mock.inspectFuncUpdatePassword = f

	return mmUpdatePassword
}

// Return sets up results that will be returned by IServiceAuth.UpdatePassword
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Return(err error) *IServiceAuthMock {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Set")
	}

	if mmUpdatePassword.defaultExpectation == nil {
		mmUpdatePassword.defaultExpectation = &IServiceAuthMockUpdatePasswordExpectation{mock: mmUpdatePassword.mock}
	}
	mmUpdatePassword.defaultExpectation.results = &IServiceAuthMockUpdatePasswordResults{err}
	mmUpdatePassword.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// Set uses given function f to mock the IServiceAuth.UpdatePassword method
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Set(f func(ctx context.Context, updatePassInfo *model.UpdatePassInfo) (err error)) *IServiceAuthMock {
	if mmUpdatePassword.defaultExpectation != nil {
		mmUpdatePassword.mock.t.Fatalf("Default expectation is already set for the IServiceAuth.UpdatePassword method")
	}

	if len(mmUpdatePassword.expectations) > 0 {
		mmUpdatePassword.mock.t.Fatalf("Some expectations are already set for the IServiceAuth.UpdatePassword method")
	}

	mmUpdatePassword.mock.funcUpdatePassword = f
	mmUpdatePassword.mock.funcUpdatePasswordOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword.mock
}

// When sets expectation for the IServiceAuth.UpdatePassword which will trigger the result defined by the following
// Then helper
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) When(ctx context.Context, updatePassInfo *model.UpdatePassInfo) *IServiceAuthMockUpdatePasswordExpectation {
	if mmUpdatePassword.mock.funcUpdatePassword != nil {
		mmUpdatePassword.mock.t.Fatalf("IServiceAuthMock.UpdatePassword mock is already set by Set")
	}

	expectation := &IServiceAuthMockUpdatePasswordExpectation{
		mock:               mmUpdatePassword.mock,
		params:             &IServiceAuthMockUpdatePasswordParams{ctx, updatePassInfo},
		expectationOrigins: IServiceAuthMockUpdatePasswordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdatePassword.expectations = append(mmUpdatePassword.expectations, expectation)
	return expectation
}

// Then sets up IServiceAuth.UpdatePassword return parameters for the expectation previously defined by the When method
func (e *IServiceAuthMockUpdatePasswordExpectation) Then(err error) *IServiceAuthMock {
	e.results = &IServiceAuthMockUpdatePasswordResults{err}
	return e.mock
}

// Times sets number of times IServiceAuth.UpdatePassword should be invoked
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Times(n uint64) *mIServiceAuthMockUpdatePassword {
	if n == 0 {
		mmUpdatePassword.mock.t.Fatalf("Times of IServiceAuthMock.UpdatePassword mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdatePassword.expectedInvocations, n)
	mmUpdatePassword.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdatePassword
}

func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) invocationsDone() bool {
	if len(mmUpdatePassword.expectations) == 0 && mmUpdatePassword.defaultExpectation == nil && mmUpdatePassword.mock.funcUpdatePassword == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.mock.afterUpdatePasswordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdatePassword.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdatePassword implements mm_auth.IServiceAuth
func (mmUpdatePassword *IServiceAuthMock) UpdatePassword(ctx context.Context, updatePassInfo *model.UpdatePassInfo) (err error) {
	mm_atomic.AddUint64(&mmUpdatePassword.beforeUpdatePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdatePassword.afterUpdatePasswordCounter, 1)

	mmUpdatePassword.t.Helper()

	if mmUpdatePassword.inspectFuncUpdatePassword != nil {
		mmUpdatePassword.inspectFuncUpdatePassword(ctx, updatePassInfo)
	}

	mm_params := IServiceAuthMockUpdatePasswordParams{ctx, updatePassInfo}

	// Record call args
	mmUpdatePassword.UpdatePasswordMock.mutex.Lock()
	mmUpdatePassword.UpdatePasswordMock.callArgs = append(mmUpdatePassword.UpdatePasswordMock.callArgs, &mm_params)
	mmUpdatePassword.UpdatePasswordMock.mutex.Unlock()

	for _, e := range mmUpdatePassword.UpdatePasswordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdatePassword.UpdatePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdatePassword.UpdatePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.params
		mm_want_ptrs := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.paramPtrs

		mm_got := IServiceAuthMockUpdatePasswordParams{ctx, updatePassInfo}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdatePassword.t.Errorf("IServiceAuthMock.UpdatePassword got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.updatePassInfo != nil && !minimock.Equal(*mm_want_ptrs.updatePassInfo, mm_got.updatePassInfo) {
				mmUpdatePassword.t.Errorf("IServiceAuthMock.UpdatePassword got unexpected parameter updatePassInfo, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.originUpdatePassInfo, *mm_want_ptrs.updatePassInfo, mm_got.updatePassInfo, minimock.Diff(*mm_want_ptrs.updatePassInfo, mm_got.updatePassInfo))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdatePassword.t.Errorf("IServiceAuthMock.UpdatePassword got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdatePassword.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdatePassword.UpdatePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdatePassword.t.Fatal("No results are set for the IServiceAuthMock.UpdatePassword")
		}
		return (*mm_results).err
	}
	if mmUpdatePassword.funcUpdatePassword != nil {
		return mmUpdatePassword.funcUpdatePassword(ctx, updatePassInfo)
	}
	mmUpdatePassword.t.Fatalf("Unexpected call to IServiceAuthMock.UpdatePassword. %v %v", ctx, updatePassInfo)
	return
}

// UpdatePasswordAfterCounter returns a count of finished IServiceAuthMock.UpdatePassword invocations
func (mmUpdatePassword *IServiceAuthMock) UpdatePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.afterUpdatePasswordCounter)
}

// UpdatePasswordBeforeCounter returns a count of IServiceAuthMock.UpdatePassword invocations
func (mmUpdatePassword *IServiceAuthMock) UpdatePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePassword.beforeUpdatePasswordCounter)
}

// Calls returns a list of arguments used in each call to IServiceAuthMock.UpdatePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdatePassword *mIServiceAuthMockUpdatePassword) Calls() []*IServiceAuthMockUpdatePasswordParams {
	mmUpdatePassword.mutex.RLock()

	argCopy := make([]*IServiceAuthMockUpdatePasswordParams, len(mmUpdatePassword.callArgs))
	copy(argCopy, mmUpdatePassword.callArgs)

	mmUpdatePassword.mutex.RUnlock()

	return argCopy
}

// MinimockUpdatePasswordDone returns true if the count of the UpdatePassword invocations corresponds
// the number of defined expectations
func (m *IServiceAuthMock) MinimockUpdatePasswordDone() bool {
	if m.UpdatePasswordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdatePasswordMock.invocationsDone()
}

// MinimockUpdatePasswordInspect logs each unmet expectation
func (m *IServiceAuthMock) MinimockUpdatePasswordInspect() {
	for _, e := range m.UpdatePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceAuthMock.UpdatePassword at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdatePasswordCounter := mm_atomic.LoadUint64(&m.afterUpdatePasswordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdatePasswordMock.defaultExpectation != nil && afterUpdatePasswordCounter < 1 {
		if m.UpdatePasswordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceAuthMock.UpdatePassword at\n%s", m.UpdatePasswordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceAuthMock.UpdatePassword at\n%s with params: %#v", m.UpdatePasswordMock.defaultExpectation.expectationOrigins.origin, *m.UpdatePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdatePassword != nil && afterUpdatePasswordCounter < 1 {
		m.t.Errorf("Expected call to IServiceAuthMock.UpdatePassword at\n%s", m.funcUpdatePasswordOrigin)
	}

	if !m.UpdatePasswordMock.invocationsDone() && afterUpdatePasswordCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceAuthMock.UpdatePassword at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdatePasswordMock.expectedInvocations), m.UpdatePasswordMock.expectedInvocationsOrigin, afterUpdatePasswordCounter)
	}
}

type mIServiceAuthMockValidateToken struct {
	optional           bool
	mock               *IServiceAuthMock
	defaultExpectation *IServiceAuthMockValidateTokenExpectation
	expectations       []*IServiceAuthMockValidateTokenExpectation

	callArgs []*IServiceAuthMockValidateTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IServiceAuthMockValidateTokenExpectation specifies expectation struct of the IServiceAuth.ValidateToken
type IServiceAuthMockValidateTokenExpectation struct {
	mock               *IServiceAuthMock
	params             *IServiceAuthMockValidateTokenParams
	paramPtrs          *IServiceAuthMockValidateTokenParamPtrs
	expectationOrigins IServiceAuthMockValidateTokenExpectationOrigins
	results            *IServiceAuthMockValidateTokenResults
	returnOrigin       string
	Counter            uint64
}

// IServiceAuthMockValidateTokenParams contains parameters of the IServiceAuth.ValidateToken
type IServiceAuthMockValidateTokenParams struct {
	ctx         context.Context
	accessToken string
}

// IServiceAuthMockValidateTokenParamPtrs contains pointers to parameters of the IServiceAuth.ValidateToken
type IServiceAuthMockValidateTokenParamPtrs struct {
	ctx         *context.Context
	accessToken *string
}

// IServiceAuthMockValidateTokenResults contains results of the IServiceAuth.ValidateToken
type IServiceAuthMockValidateTokenResults struct {
	b1  bool
	err error
}

// IServiceAuthMockValidateTokenOrigins contains origins of expectations of the IServiceAuth.ValidateToken
type IServiceAuthMockValidateTokenExpectationOrigins struct {
	origin            string
	originCtx         string
	originAccessToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateToken *mIServiceAuthMockValidateToken) Optional() *mIServiceAuthMockValidateToken {
	mmValidateToken.optional = true
	return mmValidateToken
}

// Expect sets up expected params for IServiceAuth.ValidateToken
func (mmValidateToken *mIServiceAuthMockValidateToken) Expect(ctx context.Context, accessToken string) *mIServiceAuthMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceAuthMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.paramPtrs != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by ExpectParams functions")
	}

	mmValidateToken.defaultExpectation.params = &IServiceAuthMockValidateTokenParams{ctx, accessToken}
	mmValidateToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateToken.expectations {
		if minimock.Equal(e.params, mmValidateToken.defaultExpectation.params) {
			mmValidateToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateToken.defaultExpectation.params)
		}
	}

	return mmValidateToken
}

// ExpectCtxParam1 sets up expected param ctx for IServiceAuth.ValidateToken
func (mmValidateToken *mIServiceAuthMockValidateToken) ExpectCtxParam1(ctx context.Context) *mIServiceAuthMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceAuthMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &IServiceAuthMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.ctx = &ctx
	mmValidateToken.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmValidateToken
}

// ExpectAccessTokenParam2 sets up expected param accessToken for IServiceAuth.ValidateToken
func (mmValidateToken *mIServiceAuthMockValidateToken) ExpectAccessTokenParam2(accessToken string) *mIServiceAuthMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceAuthMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &IServiceAuthMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.accessToken = &accessToken
	mmValidateToken.defaultExpectation.expectationOrigins.originAccessToken = minimock.CallerInfo(1)

	return mmValidateToken
}

// Inspect accepts an inspector function that has same arguments as the IServiceAuth.ValidateToken
func (mmValidateToken *mIServiceAuthMockValidateToken) Inspect(f func(ctx context.Context, accessToken string)) *mIServiceAuthMockValidateToken {
	if mmValidateToken.mock.inspectFuncValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("Inspect function is already set for IServiceAuthMock.ValidateToken")
	}

	mmValidateToken.mock.inspectFuncValidateToken = f

	return mmValidateToken
}

// Return sets up results that will be returned by IServiceAuth.ValidateToken
func (mmValidateToken *mIServiceAuthMockValidateToken) Return(b1 bool, err error) *IServiceAuthMock {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &IServiceAuthMockValidateTokenExpectation{mock: mmValidateToken.mock}
	}
	mmValidateToken.defaultExpectation.results = &IServiceAuthMockValidateTokenResults{b1, err}
	mmValidateToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// Set uses given function f to mock the IServiceAuth.ValidateToken method
func (mmValidateToken *mIServiceAuthMockValidateToken) Set(f func(ctx context.Context, accessToken string) (b1 bool, err error)) *IServiceAuthMock {
	if mmValidateToken.defaultExpectation != nil {
		mmValidateToken.mock.t.Fatalf("Default expectation is already set for the IServiceAuth.ValidateToken method")
	}

	if len(mmValidateToken.expectations) > 0 {
		mmValidateToken.mock.t.Fatalf("Some expectations are already set for the IServiceAuth.ValidateToken method")
	}

	mmValidateToken.mock.funcValidateToken = f
	mmValidateToken.mock.funcValidateTokenOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// When sets expectation for the IServiceAuth.ValidateToken which will trigger the result defined by the following
// Then helper
func (mmValidateToken *mIServiceAuthMockValidateToken) When(ctx context.Context, accessToken string) *IServiceAuthMockValidateTokenExpectation {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("IServiceAuthMock.ValidateToken mock is already set by Set")
	}

	expectation := &IServiceAuthMockValidateTokenExpectation{
		mock:               mmValidateToken.mock,
		params:             &IServiceAuthMockValidateTokenParams{ctx, accessToken},
		expectationOrigins: IServiceAuthMockValidateTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateToken.expectations = append(mmValidateToken.expectations, expectation)
	return expectation
}

// Then sets up IServiceAuth.ValidateToken return parameters for the expectation previously defined by the When method
func (e *IServiceAuthMockValidateTokenExpectation) Then(b1 bool, err error) *IServiceAuthMock {
	e.results = &IServiceAuthMockValidateTokenResults{b1, err}
	return e.mock
}

// Times sets number of times IServiceAuth.ValidateToken should be invoked
func (mmValidateToken *mIServiceAuthMockValidateToken) Times(n uint64) *mIServiceAuthMockValidateToken {
	if n == 0 {
		mmValidateToken.mock.t.Fatalf("Times of IServiceAuthMock.ValidateToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateToken.expectedInvocations, n)
	mmValidateToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateToken
}

func (mmValidateToken *mIServiceAuthMockValidateToken) invocationsDone() bool {
	if len(mmValidateToken.expectations) == 0 && mmValidateToken.defaultExpectation == nil && mmValidateToken.mock.funcValidateToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateToken.mock.afterValidateTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateToken implements mm_auth.IServiceAuth
func (mmValidateToken *IServiceAuthMock) ValidateToken(ctx context.Context, accessToken string) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmValidateToken.beforeValidateTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateToken.afterValidateTokenCounter, 1)

	mmValidateToken.t.Helper()

	if mmValidateToken.inspectFuncValidateToken != nil {
		mmValidateToken.inspectFuncValidateToken(ctx, accessToken)
	}

	mm_params := IServiceAuthMockValidateTokenParams{ctx, accessToken}

	// Record call args
	mmValidateToken.ValidateTokenMock.mutex.Lock()
	mmValidateToken.ValidateTokenMock.callArgs = append(mmValidateToken.ValidateTokenMock.callArgs, &mm_params)
	mmValidateToken.ValidateTokenMock.mutex.Unlock()

	for _, e := range mmValidateToken.ValidateTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmValidateToken.ValidateTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateToken.ValidateTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateToken.ValidateTokenMock.defaultExpectation.params
		mm_want_ptrs := mmValidateToken.ValidateTokenMock.defaultExpectation.paramPtrs

		mm_got := IServiceAuthMockValidateTokenParams{ctx, accessToken}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmValidateToken.t.Errorf("IServiceAuthMock.ValidateToken got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.accessToken != nil && !minimock.Equal(*mm_want_ptrs.accessToken, mm_got.accessToken) {
				mmValidateToken.t.Errorf("IServiceAuthMock.ValidateToken got unexpected parameter accessToken, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originAccessToken, *mm_want_ptrs.accessToken, mm_got.accessToken, minimock.Diff(*mm_want_ptrs.accessToken, mm_got.accessToken))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateToken.t.Errorf("IServiceAuthMock.ValidateToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateToken.ValidateTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateToken.t.Fatal("No results are set for the IServiceAuthMock.ValidateToken")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmValidateToken.funcValidateToken != nil {
		return mmValidateToken.funcValidateToken(ctx, accessToken)
	}
	mmValidateToken.t.Fatalf("Unexpected call to IServiceAuthMock.ValidateToken. %v %v", ctx, accessToken)
	return
}

// ValidateTokenAfterCounter returns a count of finished IServiceAuthMock.ValidateToken invocations
func (mmValidateToken *IServiceAuthMock) ValidateTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.afterValidateTokenCounter)
}

// ValidateTokenBeforeCounter returns a count of IServiceAuthMock.ValidateToken invocations
func (mmValidateToken *IServiceAuthMock) ValidateTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.beforeValidateTokenCounter)
}

// Calls returns a list of arguments used in each call to IServiceAuthMock.ValidateToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateToken *mIServiceAuthMockValidateToken) Calls() []*IServiceAuthMockValidateTokenParams {
	mmValidateToken.mutex.RLock()

	argCopy := make([]*IServiceAuthMockValidateTokenParams, len(mmValidateToken.callArgs))
	copy(argCopy, mmValidateToken.callArgs)

	mmValidateToken.mutex.RUnlock()

	return argCopy
}

// MinimockValidateTokenDone returns true if the count of the ValidateToken invocations corresponds
// the number of defined expectations
func (m *IServiceAuthMock) MinimockValidateTokenDone() bool {
	if m.ValidateTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateTokenMock.invocationsDone()
}

// MinimockValidateTokenInspect logs each unmet expectation
func (m *IServiceAuthMock) MinimockValidateTokenInspect() {
	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IServiceAuthMock.ValidateToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateTokenCounter := mm_atomic.LoadUint64(&m.afterValidateTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateTokenMock.defaultExpectation != nil && afterValidateTokenCounter < 1 {
		if m.ValidateTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IServiceAuthMock.ValidateToken at\n%s", m.ValidateTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IServiceAuthMock.ValidateToken at\n%s with params: %#v", m.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *m.ValidateTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateToken != nil && afterValidateTokenCounter < 1 {
		m.t.Errorf("Expected call to IServiceAuthMock.ValidateToken at\n%s", m.funcValidateTokenOrigin)
	}

	if !m.ValidateTokenMock.invocationsDone() && afterValidateTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to IServiceAuthMock.ValidateToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateTokenMock.expectedInvocations), m.ValidateTokenMock.expectedInvocationsOrigin, afterValidateTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IServiceAuthMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockConfirmEmailInspect()

			m.MinimockGetAccessTokenInspect()

			m.MinimockLoginInspect()

			m.MinimockRegistrationInspect()

			m.MinimockUpdatePasswordInspect()

			m.MinimockValidateTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IServiceAuthMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IServiceAuthMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConfirmEmailDone() &&
		m.MinimockGetAccessTokenDone() &&
		m.MinimockLoginDone() &&
		m.MinimockRegistrationDone() &&
		m.MinimockUpdatePasswordDone() &&
		m.MinimockValidateTokenDone()
}
